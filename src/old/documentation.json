{
    "pipes": [],
    "interfaces": [
        {
            "name": "APIService",
            "id": "interface-APIService-eb1c9bdf43f284ee25af079167e00cc5",
            "file": "src/app/services/api-service.interface.ts",
            "type": "interface",
            "sourceCode": "export interface APIService {\n\n  /**\n   * Common host for API calls.\n   * Example: 'https://dev.mouseapp.io'\n   *\n   * @usage\n   * ```\n   * // In service class\n   * readonly host = environment.host;\n   * ```\n   */\n  readonly host: string;\n}\n",
            "properties": [
                {
                    "name": "host",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Common host for API calls.\nExample: &#39;<a href=\"https://dev.mouseapp.io&#39;\">https://dev.mouseapp.io&#39;</a></p>\n",
                    "line": 16,
                    "modifierKind": [
                        132
                    ],
                    "jsdoctags": [
                        {
                            "pos": 199,
                            "end": 209,
                            "flags": 0,
                            "kind": 288,
                            "atToken": {
                                "pos": 199,
                                "end": 200,
                                "flags": 0,
                                "kind": 57
                            },
                            "tagName": {
                                "pos": 200,
                                "end": 205,
                                "flags": 0,
                                "escapedText": "usage"
                            },
                            "comment": "<p>```</p>\n<ul>\n<li>// In service class</li>\n<li>readonly host = environment.host;</li>\n<li>```</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Unifying interfaces for API services by adding common host property.</p>\n",
            "methods": []
        },
        {
            "name": "Restaurant",
            "id": "interface-Restaurant-f9168e30ff229427f7df687180b3da83",
            "file": "src/app/models/restaurants/restaurant.ts",
            "type": "interface",
            "sourceCode": "export interface Restaurant {\n  id: string;\n  name: string;\n  rating: number;\n  address: string;\n}\n\n",
            "properties": [
                {
                    "name": "address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "rating",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RestaurantsAPI",
            "id": "interface-RestaurantsAPI-6e9961ac85f41a6e26d92ba4bec5fb5d",
            "file": "src/app/services/restaurants/restaurants-api.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Restaurant } from '../../models/restaurants/restaurant';\n\nexport interface RestaurantsAPI {\n\n  /**\n   * GET: /api/v1/restaurants\n   * Get restaurants list.\n   */\n  getRestaurants(query?: string): Observable<Restaurant[]>;\n\n  /**\n   * GET: /api/v1/restaurant\n   * Get restaurant by id.\n   */\n  getRestaurant(id: string): Observable<Restaurant>;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "getRestaurant",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Restaurant>",
                    "typeParameters": [],
                    "line": 16,
                    "description": "<p>GET: /api/v1/restaurant\nGet restaurant by id.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRestaurants",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Restaurant[]>",
                    "typeParameters": [],
                    "line": 10,
                    "description": "<p>GET: /api/v1/restaurants\nGet restaurants list.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "RouterStateUrl",
            "id": "interface-RouterStateUrl-e09afe8272c934d818cec1aaea1038cd",
            "file": "src/app/store/root/router/index.ts",
            "type": "interface",
            "sourceCode": "import { getSelectors, RouterReducerState } from '@ngrx/router-store';\nimport { createFeatureSelector } from '@ngrx/store';\nimport { Params } from '@angular/router';\n\nexport interface RouterStateUrl {\n  url: string;\n  queryParams: Params;\n  params: Params;\n}\n\nexport interface State {\n  router: RouterReducerState<RouterStateUrl>;\n}\n\nexport const selectRouter = createFeatureSelector<RouterReducerState<RouterStateUrl>>('router');\n\nexport const {\n  selectQueryParams,    // select the current route query params\n  selectRouteParams,    // select the current route params\n  selectRouteData,      // select the current route data\n  selectUrl,            // select the current url\n} = getSelectors(selectRouter);\n",
            "properties": [
                {
                    "name": "params",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "queryParams",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-2eb62b9b868f3547195d0f9565ee2fca",
            "file": "src/app/store/root/state.ts",
            "type": "interface",
            "sourceCode": "import { ClientStoreState } from './client';\nimport { AppStoreState } from './app';\n\nexport interface State {\n  app: AppStoreState.State;\n  client: ClientStoreState.State;\n}\n\nexport const initialState: State = {\n  app: AppStoreState.initialState,\n  client: ClientStoreState.initialState,\n};\n",
            "properties": [
                {
                    "name": "app",
                    "type": "AppStoreState.State",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "client",
                    "type": "ClientStoreState.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-3b2183adcdc96d83c3da2eecf0ae1855-1",
            "file": "src/app/store/root/app/state.ts",
            "type": "interface",
            "sourceCode": "import { ResponseError } from '../../../models/response/response-error.model';\n\nexport interface State {\n  errorResponse: ResponseError;\n}\n\nexport const initialState: State = {\n  errorResponse: new ResponseError(),\n};\n",
            "properties": [
                {
                    "name": "errorResponse",
                    "type": "ResponseError",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-f31c79d767a92b32b0ec2bd616d35f74-2",
            "file": "src/app/store/root/client/state.ts",
            "type": "interface",
            "sourceCode": "import { UserStoreState } from './user';\nimport { BasketStoreState } from './basket';\nimport { PizzasStoreState } from './pizzas';\nimport { RestaurantsStoreState } from './restaurants';\n\nexport interface State {\n  user: UserStoreState.State;\n  pizzas: PizzasStoreState.State;\n  basket: BasketStoreState.State;\n  restaurants: RestaurantsStoreState.State;\n}\n\nexport const initialState: State = {\n  user: UserStoreState.initialState,\n  pizzas: PizzasStoreState.initialState,\n  basket: BasketStoreState.initialState,\n  restaurants: RestaurantsStoreState.initialState,\n};\n",
            "properties": [
                {
                    "name": "basket",
                    "type": "BasketStoreState.State",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "pizzas",
                    "type": "PizzasStoreState.State",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "restaurants",
                    "type": "RestaurantsStoreState.State",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "user",
                    "type": "UserStoreState.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "State",
            "id": "interface-State-e09afe8272c934d818cec1aaea1038cd-3",
            "file": "src/app/store/root/router/index.ts",
            "type": "interface",
            "sourceCode": "import { getSelectors, RouterReducerState } from '@ngrx/router-store';\nimport { createFeatureSelector } from '@ngrx/store';\nimport { Params } from '@angular/router';\n\nexport interface RouterStateUrl {\n  url: string;\n  queryParams: Params;\n  params: Params;\n}\n\nexport interface State {\n  router: RouterReducerState<RouterStateUrl>;\n}\n\nexport const selectRouter = createFeatureSelector<RouterReducerState<RouterStateUrl>>('router');\n\nexport const {\n  selectQueryParams,    // select the current route query params\n  selectRouteParams,    // select the current route params\n  selectRouteData,      // select the current route data\n  selectUrl,            // select the current url\n} = getSelectors(selectRouter);\n",
            "properties": [
                {
                    "name": "router",
                    "type": "RouterReducerState<RouterStateUrl>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "State-3"
        },
        {
            "name": "State",
            "id": "interface-State-146815bc07973770ee7032ce13947ac4-4",
            "file": "src/app/store/root/client/basket/basket.state.ts",
            "type": "interface",
            "sourceCode": "import { GetPizzasResponse } from '../../../../models/pizzas/get-pizzas-response.model';\nimport mockGetPizzasResponse from '../../../../mocks/pizzas/get-pizzas-response.mock';\n\nexport interface State {\n  pizzasResponse: GetPizzasResponse;\n}\n\nexport const initialState: State = {\n  pizzasResponse: {\n    pizzas: mockGetPizzasResponse?.pizzas?.slice(0, 2),\n  },\n};\n",
            "properties": [
                {
                    "name": "pizzasResponse",
                    "type": "GetPizzasResponse",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "State-4"
        },
        {
            "name": "State",
            "id": "interface-State-5dd23943686555e6a81ac400684eb0fb-5",
            "file": "src/app/store/root/client/pizzas/pizzas.state.ts",
            "type": "interface",
            "sourceCode": "import { GetPizzasResponse } from '../../../../models/pizzas/get-pizzas-response.model';\n\nexport interface State {\n  pizzasResponse: GetPizzasResponse;\n  toppingsResponse: string[];\n  loading: boolean;\n}\n\nexport const initialState: State = {\n  pizzasResponse: {\n    pizzas: [],\n  },\n  toppingsResponse: [\n    'anchovy', 'bacon', 'basil', 'chili', 'mozzarella', 'mushroom',\n    'olive', 'onion', 'pepper', 'pepperoni', 'sweetcorn', 'tomato',\n  ],\n  loading: false,\n};\n",
            "properties": [
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "pizzasResponse",
                    "type": "GetPizzasResponse",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "toppingsResponse",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 5,
            "duplicateName": "State-5"
        },
        {
            "name": "State",
            "id": "interface-State-443dc70e95a11889085bcac41beccd75-6",
            "file": "src/app/store/root/client/restaurants/restaurants.state.ts",
            "type": "interface",
            "sourceCode": "import { Restaurant } from '../../../../models/restaurants/restaurant';\n\nexport interface State {\n  restaurants: Restaurant[];\n}\n\nexport const initialState: State = {\n  restaurants: []\n};\n",
            "properties": [
                {
                    "name": "restaurants",
                    "type": "Restaurant[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 6,
            "duplicateName": "State-6"
        },
        {
            "name": "State",
            "id": "interface-State-9a0993f191545dd65ba4d483ff1ad800-7",
            "file": "src/app/store/root/client/user/user.state.ts",
            "type": "interface",
            "sourceCode": "import { UserResponse } from '../../../../models/user/user-response.model';\nimport { UserLoginResponse } from '../../../../models/user/user-login-response.model';\n\nexport interface State {\n  logined: boolean;\n  userTokenResponse: UserLoginResponse;\n  userResponse: UserResponse;\n}\n\nexport const initialState: State = {\n  logined: false,\n  userTokenResponse: {\n    token: 'TOKEN',\n    expiresAt: 'DATE',\n  },\n  userResponse: {\n    name: 'Username',\n  },\n};\n",
            "properties": [
                {
                    "name": "logined",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userResponse",
                    "type": "UserResponse",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "userTokenResponse",
                    "type": "UserLoginResponse",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 7,
            "duplicateName": "State-7"
        },
        {
            "name": "Unsubscribe",
            "id": "interface-Unsubscribe-f7049da24faf64eed7e65e5ee5e0225f",
            "file": "src/app/components/unsubscribe.interface.ts",
            "type": "interface",
            "sourceCode": "import { Subject } from 'rxjs';\n\nexport interface Unsubscribe {\n\n  /**\n   * Unsubscribe subject.\n   *\n   * Example:\n   * ```\n   * ngOnDestroy(): void {\n   *   this.unsubscribe.next();\n   * }\n   * ```\n   */\n  readonly unsubscribe: Subject<void>;\n}\n",
            "properties": [
                {
                    "name": "unsubscribe",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>Unsubscribe subject.</p>\n<p>Example:</p>\n<p>```</p>\n<ul>\n<li>ngOnDestroy(): void {</li>\n<li>this.unsubscribe.next();</li>\n<li>}</li>\n<li>```</li>\n</ul>\n",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "PizzasEffects",
            "id": "injectable-PizzasEffects-c97a482937b89756e16c7110d6685761",
            "file": "src/app/store/root/client/pizzas/pizzas.effects.ts",
            "properties": [
                {
                    "name": "getPizzas$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType<GetPizzas>(ActionTypes.GetPizzas),\n    withLatestFrom(this.store.pipe(select(getUserTokenState))),\n    switchMap(([action, token]) => {\n        // @ts-ignore\n        return this.pizzasService.getPizzas(token).pipe(\n          map((response: GetPizzasResponse) =>\n            new GetPizzasSuccess({ response }),\n          ),\n          catchError((errResponse: ResponseError) => of(errResponse).pipe(\n            switchMap((response: ResponseError) => [\n              new GetPizzasFailure({ response }),\n              new AppStoreActions.AddErrorResponse({ response }),\n            ]),\n          )),\n        );\n      },\n    ),\n  ))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "jsdoctags": [
                        {
                            "pos": 838,
                            "end": 846,
                            "flags": 0,
                            "kind": 288,
                            "atToken": {
                                "pos": 838,
                                "end": 839,
                                "flags": 0,
                                "kind": 57
                            },
                            "tagName": {
                                "pos": 839,
                                "end": 845,
                                "flags": 0,
                                "escapedText": "action"
                            },
                            "comment": "<ul>\n<li>[Pizzas] GetPizzas</li>\n</ul>\n"
                        },
                        {
                            "pos": 872,
                            "end": 879,
                            "flags": 0,
                            "kind": 293,
                            "atToken": {
                                "pos": 872,
                                "end": 873,
                                "flags": 0,
                                "kind": 57
                            },
                            "tagName": {
                                "pos": 873,
                                "end": 879,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<p>:\nSuccess: [Pizzas] GetPizzasSuccess\nFailure: [Pizzas] GetPizzasFailure &amp; [Errors] AddErrorResponse</p>\n"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "<p>Provides Pizzas Store Effects.</p>\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { RootStoreState } from '../../index';\nimport { catchError, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { ActionTypes, GetPizzas, GetPizzasFailure, GetPizzasSuccess } from './pizzas.actions';\nimport { of } from 'rxjs';\nimport { ResponseSuccess } from '../../../../models';\nimport { ResponseError } from '../../../../models';\nimport { AppStoreActions } from '../../app';\nimport { PizzasService } from '../../../../services/pizzas/pizzas.service';\nimport { GetPizzasResponse } from '../../../../models';\nimport { getUserTokenState } from '../user/user.selectors';\n\n/**\n * Provides Pizzas Store Effects.\n */\n@Injectable()\nexport class PizzasEffects {\n\n  /**\n   * @action - [Pizzas] GetPizzas\n   * @return:\n   *   Success: [Pizzas] GetPizzasSuccess\n   *   Failure: [Pizzas] GetPizzasFailure & [Errors] AddErrorResponse\n   */\n  getPizzas$ = createEffect(() => this.actions$.pipe(\n    ofType<GetPizzas>(ActionTypes.GetPizzas),\n    withLatestFrom(this.store.pipe(select(getUserTokenState))),\n    switchMap(([action, token]) => {\n        // @ts-ignore\n        return this.pizzasService.getPizzas(token).pipe(\n          map((response: GetPizzasResponse) =>\n            new GetPizzasSuccess({ response }),\n          ),\n          catchError((errResponse: ResponseError) => of(errResponse).pipe(\n            switchMap((response: ResponseError) => [\n              new GetPizzasFailure({ response }),\n              new AppStoreActions.AddErrorResponse({ response }),\n            ]),\n          )),\n        );\n      },\n    ),\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<RootStoreState.State>,\n    private pizzasService: PizzasService,\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>"
                    },
                    {
                        "name": "pizzasService",
                        "type": "PizzasService"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pizzasService",
                        "type": "PizzasService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PizzasService",
            "id": "injectable-PizzasService-3e7b134cdd13e7153dc52f9e9b099fbf",
            "file": "src/app/services/pizzas/pizzas.service.ts",
            "properties": [
                {
                    "name": "host",
                    "defaultValue": "environment.host",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getPizzas",
                    "args": [
                        {
                            "name": "token",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetPizzasResponse>",
                    "typeParameters": [],
                    "line": 24,
                    "description": "<p>GET: /api/v1/restaurant\nGet Pizzas.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "<p>Implementation of restaurant APIs.</p>\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable, of} from 'rxjs';\nimport {environment} from '../../../environments/environment';\nimport {GetPizzasResponse} from '../../models';\nimport mockGetPizzasResponse from '../../mocks/pizzas/get-pizzas-response.mock';\nimport {APIService} from '../api-service.interface';\n\n\n/**\n * Implementation of restaurant APIs.\n */\n@Injectable({providedIn: 'root'})\nexport class PizzasService implements APIService {\n  readonly host = environment.host;\n\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * GET: /api/v1/restaurant\n   * Get Pizzas.\n   */\n  getPizzas(token: string): Observable<GetPizzasResponse> {\n    return of(mockGetPizzasResponse);\n    /*return this.http.get<ResponseSuccess<GetPizzasResponse>>(`${this.host}/api/v1/restaurant`, {\n      headers: new HttpHeaders({Authorization: `Bearer ${token}`}),\n    });*/\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RestaurantsEffects",
            "id": "injectable-RestaurantsEffects-873f7c62671c6489be21733288dc8081",
            "file": "src/app/store/root/client/restaurants/restaurants.effects.ts",
            "properties": [
                {
                    "name": "loadRestaurants$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(loadRestaurants.type),\n    withLatestFrom(this.token$),\n    switchMap(([_, token]) => this.restaurantsService.getRestaurants(token).pipe(\n      map((response: Restaurant[]) => loadRestaurantsSuccess({response})),\n      catchError(() => EMPTY),\n    )),\n  ))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "token$",
                    "defaultValue": "this.store.pipe(select(getUserTokenState))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { RootStoreState } from '../../index';\nimport { catchError, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { loadRestaurants, loadRestaurantsSuccess } from './restaurants.actions';\nimport { EMPTY } from 'rxjs';\nimport { getUserTokenState } from '../user/user.selectors';\nimport { RestaurantsService } from '../../../../services/restaurants/restaurants.service';\nimport { Restaurant } from '../../../../models/restaurants/restaurant';\n\n@Injectable()\nexport class RestaurantsEffects {\n  private token$ = this.store.pipe(select(getUserTokenState));\n\n  loadRestaurants$ = createEffect(() => this.actions$.pipe(\n    ofType(loadRestaurants.type),\n    withLatestFrom(this.token$),\n    switchMap(([_, token]) => this.restaurantsService.getRestaurants(token).pipe(\n      map((response: Restaurant[]) => loadRestaurantsSuccess({response})),\n      catchError(() => EMPTY),\n    )),\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<RootStoreState.State>,\n    private restaurantsService: RestaurantsService,\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>"
                    },
                    {
                        "name": "restaurantsService",
                        "type": "RestaurantsService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "restaurantsService",
                        "type": "RestaurantsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RestaurantsService",
            "id": "injectable-RestaurantsService-3aad7b113eb0458e1880a93b10a2457c",
            "file": "src/app/services/restaurants/restaurants.service.ts",
            "properties": [
                {
                    "name": "host",
                    "defaultValue": "environment.host",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getRestaurant",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Restaurant>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRestaurants",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Restaurant[]>",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { RestaurantsAPI } from './restaurants-api';\nimport { Restaurant } from '../../models/restaurants/restaurant';\nimport { Observable } from 'rxjs';\nimport {APIService} from '../api-service.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestaurantsService implements APIService, RestaurantsAPI {\n  readonly host = environment.host;\n\n  constructor(private http: HttpClient) {\n  }\n\n  getRestaurants(query?: string): Observable<Restaurant[]> {\n    const params = new HttpParams().set('query', query || '');\n    return this.http.get<Restaurant[]>(`${this.host}/api/v1/restaurants`, { params });\n  }\n\n  getRestaurant(id: string): Observable<Restaurant> {\n    const params = new HttpParams().set('id', id || '');\n    return this.http.get<Restaurant>(`${this.host}/api/v1/restaurant`, { params });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserEffects",
            "id": "injectable-UserEffects-7a74847b50eb646c1dcd451f491b3260",
            "file": "src/app/store/root/client/user/user.effects.ts",
            "properties": [
                {
                    "name": "login$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType<Login>(ActionTypes.Login),\n    switchMap(action =>\n      this.userService.login(action.payload.request).pipe(\n        map((response: ResponseSuccess<UserLoginResponse>) =>\n          new LoginSuccess({ response }),\n        ),\n        catchError((errResponse: ResponseError) => of(errResponse).pipe(\n          switchMap((response: ResponseError) => [\n            new LoginFailure({ response }),\n            new AppStoreActions.AddErrorResponse({ response }),\n          ]),\n        )),\n      ),\n    ),\n  ))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "jsdoctags": [
                        {
                            "pos": 823,
                            "end": 831,
                            "flags": 0,
                            "kind": 288,
                            "atToken": {
                                "pos": 823,
                                "end": 824,
                                "flags": 0,
                                "kind": 57
                            },
                            "tagName": {
                                "pos": 824,
                                "end": 830,
                                "flags": 0,
                                "escapedText": "action"
                            },
                            "comment": "<ul>\n<li>[User] Login</li>\n</ul>\n"
                        },
                        {
                            "pos": 851,
                            "end": 858,
                            "flags": 0,
                            "kind": 293,
                            "atToken": {
                                "pos": 851,
                                "end": 852,
                                "flags": 0,
                                "kind": 57
                            },
                            "tagName": {
                                "pos": 852,
                                "end": 858,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<p>:\nSuccess: [User] LoginSuccess\nFailure: [User] LoginFailure &amp; [Errors] AddErrorResponse</p>\n"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "<p>Provides User Store Effects.</p>\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { RootStoreState } from '../../index';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ActionTypes, Login, LoginFailure, LoginSuccess } from './user.actions';\nimport { of } from 'rxjs';\nimport { UserLoginResponse } from '../../../../models/user/user-login-response.model';\nimport { ResponseSuccess } from '../../../../models/response/response-success.model';\nimport { UserService } from '../../../../services/user/user.service';\nimport { ResponseError } from '../../../../models/response/response-error.model';\nimport { AppStoreActions } from '../../app';\n\n/**\n * Provides User Store Effects.\n */\n@Injectable()\nexport class UserEffects {\n\n  /**\n   * @action - [User] Login\n   * @return:\n   *   Success: [User] LoginSuccess\n   *   Failure: [User] LoginFailure & [Errors] AddErrorResponse\n   */\n  login$ = createEffect(() => this.actions$.pipe(\n    ofType<Login>(ActionTypes.Login),\n    switchMap(action =>\n      this.userService.login(action.payload.request).pipe(\n        map((response: ResponseSuccess<UserLoginResponse>) =>\n          new LoginSuccess({ response }),\n        ),\n        catchError((errResponse: ResponseError) => of(errResponse).pipe(\n          switchMap((response: ResponseError) => [\n            new LoginFailure({ response }),\n            new AppStoreActions.AddErrorResponse({ response }),\n          ]),\n        )),\n      ),\n    ),\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<RootStoreState.State>,\n    private userService: UserService,\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>"
                    },
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-1ef1305714e92a85eaaa16b8b55ff786",
            "file": "src/app/services/user/user.service.ts",
            "properties": [
                {
                    "name": "host",
                    "defaultValue": "environment.host",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "request",
                            "type": "UserLoginRequest"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ResponseSuccess<UserLoginResponse>>",
                    "typeParameters": [],
                    "line": 24,
                    "description": "<p>POST: /api/v1/user/login\nLogin.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "UserLoginRequest",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "<p>Implementation of user APIs.</p>\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {UserLoginResponse} from '../../models/user/user-login-response.model';\nimport {ResponseSuccess} from '../../models/response/response-success.model';\nimport {UserLoginRequest} from '../../models/user/user-login-request.model';\nimport {environment} from '../../../environments/environment';\nimport {APIService} from '../api-service.interface';\n\n/**\n * Implementation of user APIs.\n */\n@Injectable({providedIn: 'root'})\nexport class UserService implements APIService {\n  readonly host = environment.host;\n\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * POST: /api/v1/user/login\n   * Login.\n   */\n  login(request: UserLoginRequest): Observable<ResponseSuccess<UserLoginResponse>> {\n    return this.http.post<ResponseSuccess<UserLoginResponse>>(`${this.host}/api/v1/user/login`, request);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddErrorResponse",
            "id": "class-AddErrorResponse-5e9ce14e0460ec77f9b7a01f7d6c52a7",
            "file": "src/app/store/root/app/actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { ResponseError } from '../../../models/response/response-error.model';\n\nexport enum ActionTypes {\n  AddErrorResponse = '[Errors] Add Error Response',\n}\n\nexport class AddErrorResponse implements Action {\n  public readonly type = ActionTypes.AddErrorResponse;\n\n  constructor(public payload: { response: ResponseError }) {\n  }\n}\n\nexport type Actions = AddErrorResponse;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.AddErrorResponse",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddPizza",
            "id": "class-AddPizza-f4f05910535255f86d84ef964eacadba",
            "file": "src/app/store/root/client/basket/basket.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Pizza } from '../../../../models/pizzas/pizza.model';\n\nexport enum ActionTypes {\n  AddPizza = '[Basket] Add Pizza',\n}\n\n// Add Pizza\n\nexport class AddPizza implements Action {\n  readonly type = ActionTypes.AddPizza;\n\n  constructor(public payload: { pizza: Pizza }) {\n  }\n}\n\nexport type Actions = AddPizza;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.AddPizza",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetPizzas",
            "id": "class-GetPizzas-5b5ef1de7e4124781214aeed7afc8b19",
            "file": "src/app/store/root/client/pizzas/pizzas.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { ResponseSuccess } from '../../../../models/response/response-success.model';\nimport { ResponseError } from '../../../../models/response/response-error.model';\nimport { GetPizzasResponse } from '../../../../models/pizzas/get-pizzas-response.model';\n\nexport enum ActionTypes {\n\n  // Get Pizzas\n\n  GetPizzas = '[Pizzas] Get Pizzas',\n  GetPizzasSuccess = '[Pizzas] Get Pizzas Success',\n  GetPizzasFailure = '[Pizzas] Get Pizzas Failure',\n}\n\n// GetPizzas\n\nexport class GetPizzas implements Action {\n  readonly type = ActionTypes.GetPizzas;\n}\n\nexport class GetPizzasSuccess implements Action {\n  readonly type = ActionTypes.GetPizzasSuccess;\n\n  constructor(public payload: { response: GetPizzasResponse }) {\n  }\n}\n\nexport class GetPizzasFailure implements Action {\n  readonly type = ActionTypes.GetPizzasFailure;\n\n  constructor(public payload: { response: ResponseError }) {\n  }\n}\n\nexport type Actions =\n\n// GetPizzas\n\n  | GetPizzas\n  | GetPizzasSuccess\n  | GetPizzasFailure;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.GetPizzas",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetPizzasFailure",
            "id": "class-GetPizzasFailure-5b5ef1de7e4124781214aeed7afc8b19",
            "file": "src/app/store/root/client/pizzas/pizzas.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { ResponseSuccess } from '../../../../models/response/response-success.model';\nimport { ResponseError } from '../../../../models/response/response-error.model';\nimport { GetPizzasResponse } from '../../../../models/pizzas/get-pizzas-response.model';\n\nexport enum ActionTypes {\n\n  // Get Pizzas\n\n  GetPizzas = '[Pizzas] Get Pizzas',\n  GetPizzasSuccess = '[Pizzas] Get Pizzas Success',\n  GetPizzasFailure = '[Pizzas] Get Pizzas Failure',\n}\n\n// GetPizzas\n\nexport class GetPizzas implements Action {\n  readonly type = ActionTypes.GetPizzas;\n}\n\nexport class GetPizzasSuccess implements Action {\n  readonly type = ActionTypes.GetPizzasSuccess;\n\n  constructor(public payload: { response: GetPizzasResponse }) {\n  }\n}\n\nexport class GetPizzasFailure implements Action {\n  readonly type = ActionTypes.GetPizzasFailure;\n\n  constructor(public payload: { response: ResponseError }) {\n  }\n}\n\nexport type Actions =\n\n// GetPizzas\n\n  | GetPizzas\n  | GetPizzasSuccess\n  | GetPizzasFailure;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.GetPizzasFailure",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetPizzasResponse",
            "id": "class-GetPizzasResponse-b504de61ecbe1295e8dc917959ff2295",
            "file": "src/app/models/pizzas/get-pizzas-response.model.ts",
            "type": "class",
            "sourceCode": "import { Pizza } from './pizza.model';\n\nexport class GetPizzasResponse {\n  pizzas: Pizza[] | undefined;\n}\n",
            "properties": [
                {
                    "name": "pizzas",
                    "type": "Pizza[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetPizzasSuccess",
            "id": "class-GetPizzasSuccess-5b5ef1de7e4124781214aeed7afc8b19",
            "file": "src/app/store/root/client/pizzas/pizzas.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { ResponseSuccess } from '../../../../models/response/response-success.model';\nimport { ResponseError } from '../../../../models/response/response-error.model';\nimport { GetPizzasResponse } from '../../../../models/pizzas/get-pizzas-response.model';\n\nexport enum ActionTypes {\n\n  // Get Pizzas\n\n  GetPizzas = '[Pizzas] Get Pizzas',\n  GetPizzasSuccess = '[Pizzas] Get Pizzas Success',\n  GetPizzasFailure = '[Pizzas] Get Pizzas Failure',\n}\n\n// GetPizzas\n\nexport class GetPizzas implements Action {\n  readonly type = ActionTypes.GetPizzas;\n}\n\nexport class GetPizzasSuccess implements Action {\n  readonly type = ActionTypes.GetPizzasSuccess;\n\n  constructor(public payload: { response: GetPizzasResponse }) {\n  }\n}\n\nexport class GetPizzasFailure implements Action {\n  readonly type = ActionTypes.GetPizzasFailure;\n\n  constructor(public payload: { response: ResponseError }) {\n  }\n}\n\nexport type Actions =\n\n// GetPizzas\n\n  | GetPizzas\n  | GetPizzasSuccess\n  | GetPizzasFailure;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.GetPizzasSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Login",
            "id": "class-Login-bb7aa8302db911d6d899d9dff2ebab6e",
            "file": "src/app/store/root/client/user/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { UserLoginResponse } from '../../../../models';\nimport { ResponseSuccess } from '../../../../models';\nimport { ResponseError } from '../../../../models';\nimport { UserLoginRequest } from '../../../../models';\n\nexport enum ActionTypes {\n\n  // Login\n\n  Login = '[User] Login',\n  LoginSuccess = '[User] Login Success',\n  LoginFailure = '[User] Login Failure',\n}\n\n// Login\n\nexport class Login implements Action {\n  readonly type = ActionTypes.Login;\n\n  constructor(public payload: { request: UserLoginRequest }) {\n  }\n}\n\nexport class LoginSuccess implements Action {\n  readonly type = ActionTypes.LoginSuccess;\n\n  constructor(public payload: { response: ResponseSuccess<UserLoginResponse> }) {\n  }\n}\n\nexport class LoginFailure implements Action {\n  readonly type = ActionTypes.LoginFailure;\n\n  constructor(public payload: { response: ResponseError }) {\n  }\n}\n\nexport type Actions =\n\n// Login\n\n  | Login\n  | LoginSuccess\n  | LoginFailure;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.Login",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoginFailure",
            "id": "class-LoginFailure-bb7aa8302db911d6d899d9dff2ebab6e",
            "file": "src/app/store/root/client/user/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { UserLoginResponse } from '../../../../models';\nimport { ResponseSuccess } from '../../../../models';\nimport { ResponseError } from '../../../../models';\nimport { UserLoginRequest } from '../../../../models';\n\nexport enum ActionTypes {\n\n  // Login\n\n  Login = '[User] Login',\n  LoginSuccess = '[User] Login Success',\n  LoginFailure = '[User] Login Failure',\n}\n\n// Login\n\nexport class Login implements Action {\n  readonly type = ActionTypes.Login;\n\n  constructor(public payload: { request: UserLoginRequest }) {\n  }\n}\n\nexport class LoginSuccess implements Action {\n  readonly type = ActionTypes.LoginSuccess;\n\n  constructor(public payload: { response: ResponseSuccess<UserLoginResponse> }) {\n  }\n}\n\nexport class LoginFailure implements Action {\n  readonly type = ActionTypes.LoginFailure;\n\n  constructor(public payload: { response: ResponseError }) {\n  }\n}\n\nexport type Actions =\n\n// Login\n\n  | Login\n  | LoginSuccess\n  | LoginFailure;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.LoginFailure",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoginSuccess",
            "id": "class-LoginSuccess-bb7aa8302db911d6d899d9dff2ebab6e",
            "file": "src/app/store/root/client/user/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { UserLoginResponse } from '../../../../models';\nimport { ResponseSuccess } from '../../../../models';\nimport { ResponseError } from '../../../../models';\nimport { UserLoginRequest } from '../../../../models';\n\nexport enum ActionTypes {\n\n  // Login\n\n  Login = '[User] Login',\n  LoginSuccess = '[User] Login Success',\n  LoginFailure = '[User] Login Failure',\n}\n\n// Login\n\nexport class Login implements Action {\n  readonly type = ActionTypes.Login;\n\n  constructor(public payload: { request: UserLoginRequest }) {\n  }\n}\n\nexport class LoginSuccess implements Action {\n  readonly type = ActionTypes.LoginSuccess;\n\n  constructor(public payload: { response: ResponseSuccess<UserLoginResponse> }) {\n  }\n}\n\nexport class LoginFailure implements Action {\n  readonly type = ActionTypes.LoginFailure;\n\n  constructor(public payload: { response: ResponseError }) {\n  }\n}\n\nexport type Actions =\n\n// Login\n\n  | Login\n  | LoginSuccess\n  | LoginFailure;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.LoginSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Pizza",
            "id": "class-Pizza-a828cb4d142f1a18cef72ef5a2ce3610",
            "file": "src/app/models/pizzas/pizza.model.ts",
            "type": "class",
            "sourceCode": "export class Pizza {\n  id: string | undefined;\n  name: string | undefined;\n  description: string | undefined;\n  toppings: string[] | undefined;\n  price: number | undefined;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "price",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "toppings",
                    "type": "string[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ResponseError",
            "id": "class-ResponseError-74dc164db058fd63aca584b633737bf5",
            "file": "src/app/models/response/response-error.model.ts",
            "type": "class",
            "sourceCode": "export class ResponseError {\n  error: string | undefined;\n  success = false;\n}\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ResponseSuccess",
            "id": "class-ResponseSuccess-b6f153346d4b74d10200f9371bbe8197",
            "file": "src/app/models/response/response-success.model.ts",
            "type": "class",
            "sourceCode": "export class ResponseSuccess<T> {\n  data: T | undefined;\n  success = true;\n\n  constructor(data?: T) {\n    this.data = data;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "T",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "T",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "type": "T | undefined",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "success",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RestaurantModel",
            "id": "class-RestaurantModel-4a1ff2944fb05363a5877dfe149442d2",
            "file": "src/app/models/restaurants/restaurant.model.ts",
            "type": "class",
            "sourceCode": "import { Restaurant } from './restaurant';\n\nexport class RestaurantModel implements Restaurant {\n  id: string;\n  name: string;\n  rating: number;\n  address: string;\n\n  constructor(\n    id: string,\n    name: string,\n    rating: number,\n    address: string,\n  ) {\n    this.id = id;\n    this.name = name;\n    this.rating = rating;\n    this.address = address;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "rating",
                        "type": "number"
                    },
                    {
                        "name": "address",
                        "type": "string"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rating",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "address",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "rating",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Restaurant"
            ]
        },
        {
            "name": "RestaurantsMockService",
            "id": "class-RestaurantsMockService-43a438c100e24fdb8b447459c818fa6b",
            "file": "src/app/services/restaurants/restaurants-mock.service.ts",
            "type": "class",
            "sourceCode": "import { RestaurantsAPI } from './restaurants-api';\nimport { Observable, of } from 'rxjs';\nimport { Restaurant } from '../../models/restaurants/restaurant';\nimport mockRestaurants from '../../mocks/restaurants/restaurants.mock';\n\nexport class RestaurantsMockService implements RestaurantsAPI {\n\n  getRestaurants(query?: string): Observable<Restaurant[]> {\n    return of(mockRestaurants);\n  }\n\n  getRestaurant(id: string): Observable<Restaurant> {\n    return of(mockRestaurants[+id]);\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getRestaurant",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Restaurant>",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRestaurants",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Restaurant[]>",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "RestaurantsAPI"
            ]
        },
        {
            "name": "UserLoginRequest",
            "id": "class-UserLoginRequest-2fd0e1d1d4fc40ee96025cdfb6441213",
            "file": "src/app/models/user/user-login-request.model.ts",
            "type": "class",
            "sourceCode": "export class UserLoginRequest {\n  username: string | undefined;\n  password: string | undefined;\n}\n",
            "properties": [
                {
                    "name": "password",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserLoginResponse",
            "id": "class-UserLoginResponse-ea7831400a88e622ed19f0a3289ff201",
            "file": "src/app/models/user/user-login-response.model.ts",
            "type": "class",
            "sourceCode": "export class UserLoginResponse {\n  token: string | undefined;\n  expiresAt: string | undefined;\n}\n",
            "properties": [
                {
                    "name": "expiresAt",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "token",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserResponse",
            "id": "class-UserResponse-90a95f0bce16febcc67f0c4aaf6c5f4c",
            "file": "src/app/models/user/user-response.model.ts",
            "type": "class",
            "sourceCode": "export class UserResponse {\n  name: string | undefined;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-2fec0ea76d64101ddefb3d1ddc78eabf",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "BasketComponent",
            "id": "component-BasketComponent-9a57b52e0dfabb7d0cf94e77cad857d6",
            "file": "src/app/modules/client/basket/basket.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-basket",
            "styleUrls": [
                "./basket.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./basket.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activePizza$",
                    "defaultValue": "new BehaviorSubject<Pizza>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "pizzasResponse$",
                    "defaultValue": "this.store.pipe(\n    select(BasketStoreSelectors.getPizzasResponseState),\n    takeUntil(this.unsubscribe),\n  )",
                    "type": "Observable<GetPizzasResponse>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "total$",
                    "defaultValue": "this.store.pipe(\n    // @ts-ignore\n    select(BasketStoreSelectors.getTotalState),\n    takeUntil(this.unsubscribe),\n  )",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "onPizzaHover",
                    "args": [
                        {
                            "name": "pizza",
                            "type": "Pizza"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { select, Store } from '@ngrx/store';\nimport { takeUntil } from 'rxjs/operators';\nimport { Pizza } from '../../../models';\nimport { GetPizzasResponse } from '../../../models';\nimport { BasketStoreSelectors } from '../../../store/root/client';\nimport { RootStoreState } from '../../../store/root';\nimport {Unsubscribe} from '../../../components/unsubscribe.interface';\n\n@Component({\n  selector: 'app-basket',\n  templateUrl: './basket.component.html',\n  styleUrls: ['./basket.component.scss'],\n})\nexport class BasketComponent implements OnInit, OnDestroy, Unsubscribe {\n  readonly unsubscribe = new Subject<void>();\n\n  pizzasResponse$: Observable<GetPizzasResponse> = this.store.pipe(\n    select(BasketStoreSelectors.getPizzasResponseState),\n    takeUntil(this.unsubscribe),\n  );\n\n  total$: Observable<number> = this.store.pipe(\n    // @ts-ignore\n    select(BasketStoreSelectors.getTotalState),\n    takeUntil(this.unsubscribe),\n  );\n\n  // @ts-ignore\n  activePizza$ = new BehaviorSubject<Pizza>(null);\n\n  constructor(private store: Store<RootStoreState.State>) { }\n\n  ngOnInit(): void {\n    this.pizzasResponse$.subscribe(resp => {\n      if (resp) {\n        // @ts-ignore\n        this.activePizza$.next(resp.pizzas[0]);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe.next();\n  }\n\n  onPizzaHover(pizza: Pizza): void {\n    this.activePizza$.next(pizza);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  max-width: 1280px;\n  width: 100%;\n  margin: 20px auto;\n  flex-direction: column;\n}\n\n.pizzas {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n\nh1 {\n  margin: 20px 0;\n  color: #1A1A1A;\n}\n\n.preview {\n  margin: 20px auto;\n  max-width: 1280px;\n  width: 100%;\n  height: 400px;\n  background-color: aliceblue;\n}\n\n.total {\n  font-weight: 900;\n  text-transform: uppercase;\n  font-size: 24px;\n  display: flex;\n  width: 100%;\n  justify-content: flex-start;\n  margin-top: 30px;\n\n  &__title {\n    margin-right: 30px;\n  }\n\n  &__value {\n    color: #32D184;\n  }\n}\n\n.pizza-card {\n  margin-bottom: 20px;\n  margin-right: 20px;\n\n  &:last-child {\n    margin-right: 0;\n  }\n}\n",
                    "styleUrl": "./basket.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "Unsubscribe"
            ],
            "templateData": "<div class=\"container\">\n  <h1>Basket</h1>\n  <app-pizza-preview [pizza]=\"activePizza$ | async\"></app-pizza-preview>\n  <div class=\"pizzas\">\n    <ng-container *ngFor=\"let pizza of (pizzasResponse$ | async)?.pizzas\">\n      <app-pizza-card\n        [pizza]=\"pizza\"\n        class=\"pizza-card\"\n        (mouseenter)=\"onPizzaHover(pizza)\">\n      </app-pizza-card>\n    </ng-container>\n  </div>\n  <div class=\"total\">\n    <div class=\"total__title\">\n      Total\n    </div>\n    <div class=\"total__value\">\n      {{ total$ | async | currency: 'USD'}}\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "BreadcrumbsComponent",
            "id": "component-BreadcrumbsComponent-c706cb3f909e3709736be6a6511b6817",
            "file": "src/app/modules/shared/breadcrumbs/breadcrumbs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumbs",
            "styleUrls": [
                "./breadcrumbs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "path",
                    "defaultValue": "''",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss']\n})\nexport class BreadcrumbsComponent implements OnInit {\n  @Input()\n  path = '';\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ul {\n  list-style: none;\n  display: flex;\n  font-size: 14pt;\n  font-weight: bold;\n\n  li {\n    cursor: pointer;\n\n    a {\n      margin-right: 24px;\n      display: flex;\n      align-items: center;\n\n      svg {\n        margin-right: 12px;\n      }\n\n      &:hover {\n        color: #1ea7fd;\n\n        svg path {\n          &:nth-child(2) {\n            fill: #1ea7fd;\n          }\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./breadcrumbs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"breadcrumbs\">\n  <ul>\n    <li>\n      <a routerLink=\"/\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n          <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n          <path d=\"M21 11H6.83l3.58-3.59L9 6l-6 6 6 6 1.41-1.41L6.83 13H21z\"/>\n        </svg>\n        {{ path | titlecase }}\n      </a>\n    </li>\n  </ul>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-89f4584877dc1295589c848695f604fd",
            "file": "src/app/uikit/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "uikit-ui-v1-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "defaultValue": "'Button'",
                    "line": 16
                },
                {
                    "name": "type",
                    "defaultValue": "this.types.DEFAULT",
                    "line": 17
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "types",
                    "defaultValue": "ButtonType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nexport enum ButtonType {\n  DEFAULT = 'default',\n  SUCCESS = 'success',\n}\n\n@Component({\n  selector: 'uikit-ui-v1-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n  readonly types = ButtonType;\n\n  @Input() title = 'Button';\n  @Input() type = this.types.DEFAULT;\n\n  constructor() {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  cursor: pointer;\n}\n\n.button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 900;\n  text-transform: uppercase;\n  background-color: #0270E4;\n  color: #ffffff;\n  height: 32px;\n  border-radius: 4px;\n  transition: 200ms ease-out;\n\n  &:hover {\n    background-color: rgba(#0270E4, 0.2);\n    color: black;\n  }\n\n  &.success {\n    background-color: #32D184;\n\n    &:hover {\n      background-color: rgba(#32D184, 0.2);\n      color: black;\n    }\n  }\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "templateData": "<div\n  class=\"button\"\n  [ngClass]=\"{\n    'success': type === types.SUCCESS\n  }\"\n>{{ title }}</div>\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-7c0fbe3817470c17a84dbdbb9ed40aa1",
            "file": "src/app/uikit/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "uikit-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'uikit-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n})\nexport class CardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>card works!</p>\n"
        },
        {
            "name": "ClientComponent",
            "id": "component-ClientComponent-1943d7ec2874db4b33aa112581aea934",
            "file": "src/app/modules/client/client.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-client",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "client.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-client',\n  templateUrl: 'client.component.html'\n})\nexport class ClientComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<app-navbar></app-navbar>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-bab02b40a21da87ba77369e7ac7ab660",
            "file": "src/app/modules/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "restaurants",
                    "defaultValue": "this.restaurantsService.getRestaurants()",
                    "type": "Observable<Restaurant[]>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Restaurant} from '../../models/restaurants/restaurant';\nimport {RestaurantsService} from '../../services/restaurants/restaurants.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  readonly restaurants: Observable<Restaurant[]> = this.restaurantsService.getRestaurants();\n\n  constructor(private restaurantsService: RestaurantsService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  max-width: 1280px;\n  width: 100%;\n  margin: 20px auto;\n  flex-direction: row;\n}\n\nul {\n  list-style: none;\n\n  li {\n    cursor: pointer;\n    font-size: 14pt;\n    font-weight: bold;\n\n    &:hover {\n      color: #1ea7fd;\n    }\n  }\n}\n\n.content {\n  margin: 24px auto;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 40px;\n  grid-auto-rows: minmax(100px, auto);\n}\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "restaurantsService",
                        "type": "RestaurantsService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "restaurantsService",
                        "type": "RestaurantsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-dashboard-navbar></app-dashboard-navbar>\n<div class=\"container\">\n  <ul>\n    <li>Restaurants</li>\n  </ul>\n  <div class=\"content\">\n    <app-restaurant-card\n      *ngFor=\"let restaurant of restaurants | async\"\n      [routerLink]=\"restaurant?.id\"\n      [model]=\"restaurant\"\n    ></app-restaurant-card>\n  </div>\n</div>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-3ead0280364905d6fc413a9f618daca7",
            "file": "src/app/uikit/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "uikit-ui-v1-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "defaultValue": "'Input...'",
                    "line": 9
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'uikit-ui-v1-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n})\nexport class InputComponent {\n  @Input() placeholder = 'Input...';\n  @Input() type = 'text';\n\n  constructor() {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #fff;\n  padding: 10px;\n  height: 12px;\n  box-shadow: none;\n  border: 1px solid #1A1A1A;\n  border-radius: 4px;\n}\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "templateData": "<input [type]=\"type\" [placeholder]=\"placeholder\">\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-2caf4e427ae53b22ab47633496a8aa3a",
            "file": "src/app/modules/client/shared/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "pizzasCount$",
                    "defaultValue": "this.store.pipe(\n    // @ts-ignore\n    select(BasketStoreSelectors.getPizzasCountState),\n    takeUntil(this.unsubscribe)\n  )",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "userResponse$",
                    "defaultValue": "this.store.pipe(\n    select(UserStoreSelectors.getUserResponseState),\n    takeUntil(this.unsubscribe)\n  )",
                    "type": "Observable<UserResponse>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {Observable, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport { UserResponse } from '../../../../models';\nimport { RootStoreState, UserStoreSelectors } from '../../../../store/root';\nimport { BasketStoreSelectors } from '../../../../store/root/client';\nimport {Unsubscribe} from '../../../../components/unsubscribe.interface';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit, OnDestroy, Unsubscribe {\n  readonly unsubscribe = new Subject<void>();\n\n  userResponse$: Observable<UserResponse> = this.store.pipe(\n    select(UserStoreSelectors.getUserResponseState),\n    takeUntil(this.unsubscribe)\n  );\n\n  pizzasCount$: Observable<number> = this.store.pipe(\n    // @ts-ignore\n    select(BasketStoreSelectors.getPizzasCountState),\n    takeUntil(this.unsubscribe)\n  );\n\n  constructor(private store: Store<RootStoreState.State>) { }\n\n  ngOnInit(): void {\n    // TODO: dispatch get user response\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@keyframes rotate {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.navbar {\n  display: flex;\n  max-width: 1280px;\n  width: 100%;\n  margin: 20px auto;\n  justify-content: space-between;\n\n  &__left {\n    display: flex;\n  }\n\n  &__logo {\n    display: flex;\n    align-items: flex-start;\n    margin-right: 60px;\n    cursor: pointer;\n    font-weight: 900;\n    font-size: 42px;\n\n    &:hover {\n      svg {\n        animation: rotate 3s linear infinite;\n      }\n    }\n\n    svg {\n      margin-left: 2px;\n    }\n  }\n\n  &__menu {\n    display: flex;\n    align-items: center;\n    font-weight: 900;\n    font-size: 18px;\n\n    &__item {\n      cursor: pointer;\n      font-weight: 900;\n      margin-right: 30px;\n      transition: 200ms ease-out;\n      display: flex;\n      align-items: center;\n\n      &:hover {\n        opacity: 0.6;\n      }\n\n      &.active {\n        color: #FF0154;\n\n        svg {\n          fill: #FF0154;\n        }\n      }\n\n      &.auth {\n        svg {\n          margin-left: 6px;\n        }\n      }\n    }\n  }\n}\n\n.basket {\n  position: relative;\n  width: 44px;\n  height: 44px;\n\n  &__count {\n    top: 0;\n    right: 0;\n    width: 16px;\n    height: 16px;\n    text-align: center;\n    font-size: 14px;\n    position: absolute;\n    background-color: #FF0154;\n    color: #ffffff;\n    border-radius: 16px;\n    font-weight: 900;\n  }\n}\n",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "Unsubscribe"
            ],
            "templateData": "<div class=\"navbar\">\n  <div class=\"navbar__logo\" routerLink=\"/\">\n    Pizzaiols\n    <svg width=\"20\" height=\"20\" viewBox=\"0 0 100 100\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"50\" cy=\"50\" r=\"47\" fill=\"white\" stroke=\"black\" stroke-width=\"6\"/>\n      <line x1=\"25\" y1=\"51\" x2=\"75\" y2=\"51\" stroke=\"black\" stroke-width=\"6\"/>\n      <line y1=\"-3\" x2=\"50\" y2=\"-3\" transform=\"matrix(0.707106 -0.707107 0.707106 0.707107 35 70.3554)\" stroke=\"black\"\n            stroke-width=\"6\"/>\n      <line x1=\"67.234\" y1=\"68.4767\" x2=\"31.8787\" y2=\"33.1213\" stroke=\"black\" stroke-width=\"6\"/>\n      <line x1=\"50\" y1=\"75\" x2=\"50\" y2=\"25\" stroke=\"black\" stroke-width=\"6\"/>\n    </svg>\n  </div>\n  <div class=\"navbar__menu\">\n    <div class=\"navbar__menu__item basket\" routerLink=\"basket\" routerLinkActive=\"active\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        <path\n          d=\"M12 2C8.43 2 5.23 3.54 3.01 6L12 22l8.99-16C18.78 3.55 15.57 2 12 2zM7 7c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm5 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"/>\n      </svg>\n      <div class=\"basket__count\">\n        {{ pizzasCount$ | async }}\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-6dd48d35a021fb31e1a0ecd9ae9569d1-1",
            "file": "src/app/modules/dashboard/shared/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@keyframes rotate {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.navbar {\n  display: flex;\n  max-width: 1280px;\n  width: 100%;\n  margin: 20px auto;\n  justify-content: space-between;\n\n  &__left {\n    display: flex;\n  }\n\n  &__logo {\n    display: flex;\n    align-items: flex-start;\n    margin-right: 60px;\n    cursor: pointer;\n    font-weight: 900;\n    font-size: 42px;\n\n    &:hover {\n      svg {\n        animation: rotate 3s linear infinite;\n      }\n    }\n\n    svg {\n      margin-left: 2px;\n    }\n  }\n\n  &__menu {\n    display: flex;\n    align-items: center;\n    font-weight: 900;\n    font-size: 18px;\n\n    &__item {\n      cursor: pointer;\n      font-weight: 900;\n      margin-right: 30px;\n      transition: 200ms ease-out;\n      display: flex;\n      align-items: center;\n\n      &:hover {\n        opacity: 0.6;\n      }\n\n      &.active {\n        color: #FF0154;\n\n        svg {\n          fill: #FF0154;\n        }\n      }\n\n      &.auth {\n        svg {\n          margin-left: 6px;\n        }\n      }\n    }\n  }\n}\n\n.basket {\n  position: relative;\n  width: 44px;\n  height: 44px;\n\n  &__count {\n    top: 0;\n    right: 0;\n    width: 16px;\n    height: 16px;\n    text-align: center;\n    font-size: 14px;\n    position: absolute;\n    background-color: #FF0154;\n    color: #ffffff;\n    border-radius: 16px;\n    font-weight: 900;\n  }\n}\n",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NavbarComponent-1",
            "templateData": "<div class=\"navbar\">\n  <div class=\"navbar__logo\" routerLink=\"/\">\n    Dashboard\n    <svg width=\"20\" height=\"20\" viewBox=\"0 0 100 100\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"50\" cy=\"50\" r=\"47\" fill=\"white\" stroke=\"black\" stroke-width=\"6\"/>\n      <line x1=\"25\" y1=\"51\" x2=\"75\" y2=\"51\" stroke=\"black\" stroke-width=\"6\"/>\n      <line y1=\"-3\" x2=\"50\" y2=\"-3\" transform=\"matrix(0.707106 -0.707107 0.707106 0.707107 35 70.3554)\" stroke=\"black\"\n            stroke-width=\"6\"/>\n      <line x1=\"67.234\" y1=\"68.4767\" x2=\"31.8787\" y2=\"33.1213\" stroke=\"black\" stroke-width=\"6\"/>\n      <line x1=\"50\" y1=\"75\" x2=\"50\" y2=\"25\" stroke=\"black\" stroke-width=\"6\"/>\n    </svg>\n  </div>\n</div>\n"
        },
        {
            "name": "PizzaCardComponent",
            "id": "component-PizzaCardComponent-0f1718c3f63d4254292b0b705c2a05a4",
            "file": "src/app/modules/shared/pizza-card/pizza-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pizza-card",
            "styleUrls": [
                "./pizza-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pizza-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pizza",
                    "line": 28,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonType.SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "pizza$",
                    "defaultValue": "new BehaviorSubject<Pizza>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "jsdoctags": [
                        {
                            "pos": 609,
                            "end": 615,
                            "flags": 0,
                            "kind": 288,
                            "atToken": {
                                "pos": 609,
                                "end": 610,
                                "flags": 0,
                                "kind": 57
                            },
                            "tagName": {
                                "pos": 610,
                                "end": 615,
                                "flags": 0,
                                "escapedText": "input"
                            },
                            "comment": "<p>: pizza - Pizza entity.</p>\n"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "onBuy",
                    "args": [
                        {
                            "name": "pizza",
                            "type": "Pizza"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { Pizza } from '../../../models';\nimport { RootStoreState } from '../../../store/root';\nimport { BasketStoreActions } from '../../../store/root/client';\nimport {ButtonType} from '../../../uikit/button/button.component';\n\n@Component({\n  selector: 'app-pizza-card',\n  templateUrl: './pizza-card.component.html',\n  styleUrls: ['./pizza-card.component.scss'],\n})\nexport class PizzaCardComponent implements OnInit {\n  readonly buttonType = ButtonType.SUCCESS;\n\n  /**\n   * @input: pizza - Pizza entity.\n   */\n    // @ts-ignore\n  pizza$ = new BehaviorSubject<Pizza>(null);\n\n  get pizza(): Pizza {\n    return this.pizza$.getValue();\n  }\n\n  @Input()\n  set pizza(value: Pizza) {\n    this.pizza$.next(value);\n  }\n\n  constructor(\n    private store: Store<RootStoreState.State>,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  onBuy(pizza: Pizza): void {\n    this.store.dispatch(new BasketStoreActions.AddPizza({ pizza }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pizza-card {\n  width: 300px;\n  height: 400px;\n  background-color: #ffffff;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: 300ms ease-out;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n\n    .pizza-card__preview {\n      transform: scale(1.1);\n    }\n  }\n\n  &__price {\n    font-weight: 900;\n    color: #000000;\n    transition: 200ms;\n    margin-bottom: 20px;\n  }\n\n  &__preview {\n    height: 200px;\n    position: relative;\n    transition: transform 200ms ease-out;\n  }\n\n  &__info {\n    height: 100%;\n    bottom: 0;\n    padding: 10px;\n    box-sizing: border-box;\n\n    &__name {\n      font-weight: 900;\n      margin-bottom: 10px;\n    }\n\n    &__description {\n      font-size: 14px;\n      max-height: 46px;\n      overflow: hidden;\n    }\n\n    &__bottom {\n      display: flex;\n    }\n\n    &__buy-btn {\n      margin-top: 20px;\n      width: 100%;\n    }\n  }\n}\n",
                    "styleUrl": "./pizza-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "pizza": {
                    "name": "pizza",
                    "setSignature": {
                        "name": "pizza",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pizza",
                        "type": "",
                        "returnType": "Pizza",
                        "line": 23
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"(pizza$ | async) as pizza\">\n  <div class=\"pizza-card\">\n    <div class=\"pizza-card__preview\">\n      <app-pizza-small-preview class=\"pizza\"></app-pizza-small-preview>\n    </div>\n    <div class=\"pizza-card__info\">\n      <div class=\"pizza-card__price\">{{ pizza.price  | currency: \"USD\" }}</div>\n      <div class=\"pizza-card__info__name\">{{ pizza.name }}</div>\n      <div class=\"pizza-card__info__description\">{{ pizza.description }}</div>\n      <div class=\"pizza-card__info__bottom\">\n        <uikit-ui-v1-button\n          class=\"pizza-card__info__buy-btn\"\n          title=\"Buy\"\n          [type]=\"buttonType\"\n          (click)=\"onBuy(pizza)\"></uikit-ui-v1-button>\n      </div>\n    </div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "PizzaPreviewComponent",
            "id": "component-PizzaPreviewComponent-3e2599194683699272e3287744807975",
            "file": "src/app/modules/shared/pizza-preview/pizza-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pizza-preview",
            "styleUrls": [
                "./pizza-preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pizza-preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pizza",
                    "line": 41,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "pizza$",
                    "defaultValue": "new BehaviorSubject<any[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "toppings",
                    "defaultValue": "[\n    'anchovy', 'bacon', 'basil', 'chili', 'mozzarella', 'mushroom',\n    'olive', 'onion', 'pepper', 'pepperoni', 'sweetcorn', 'tomato'\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {animate, animateChild, query, style, transition, trigger} from '@angular/animations';\nimport {BehaviorSubject} from 'rxjs';\n\nexport const SLIDE_ANIMATION = trigger('slide', [\n  transition(':enter', [\n    style({ transform: 'translate3d(-400px, -400px, 0px)' }),\n    animate('300ms 100ms', style({ transform: 'translate3d(0px, 0px, 0px)'})),\n    query('@drop', [\n      animateChild()\n    ]),\n  ]),\n  transition(':leave', [\n    style({ transform: 'translate3d(0px, 0px, 0px)' }),\n    animate('200ms', style({ transform: 'translate3d(-400px, -400px, 0px)'})),\n  ])\n]);\n\n\nexport const DROP_ANIMATION = trigger('drop', [\n  transition(':enter', [\n    style({ transform: 'translateY(-200px)', opacity: 0 }),\n    animate('200ms 300ms', style({ transform: 'translateY(0)', opacity: 1 }))\n  ]),\n]);\n\n@Component({\n  selector: 'app-pizza-preview',\n  animations: [DROP_ANIMATION, SLIDE_ANIMATION],\n  templateUrl: './pizza-preview.component.html',\n  styleUrls: ['./pizza-preview.component.scss']\n})\nexport class PizzaPreviewComponent {\n  pizza$ = new BehaviorSubject<any[]>([]);\n\n  get pizza(): any {\n    return this.pizza$.getValue()[0];\n  }\n\n  @Input()\n  set pizza(value: any) {\n    this.pizza$.next([value]);\n  }\n\n  toppings = [\n    'anchovy', 'bacon', 'basil', 'chili', 'mozzarella', 'mushroom',\n    'olive', 'onion', 'pepper', 'pepperoni', 'sweetcorn', 'tomato'\n  ];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pizza-viewer {\n  margin: 20px auto;\n  max-width: 1280px;\n  width: 100%;\n  height: 400px;\n  background-color: aliceblue;\n  position: relative;\n  overflow: hidden;\n\n  &__table-side, &__table {\n    width: 900px;\n    transform: skewX(62deg);\n    position: absolute;\n    left: 600px;\n    height: 1100px;\n    z-index: 0;\n  }\n  &__table-side {\n    background: #31343a;\n    top: 0;\n    width: 1885px;\n    left: -500px;\n  }\n\n  &__table {\n    background: #3a3f48;\n    top: 0;\n  }\n}\n\n.pizza {\n  width: 530px;\n  height: 342px;\n  position: absolute;\n  z-index: 1;\n\n  &__board {\n    background: url(\"../../../../assets/toppings/board.svg\") no-repeat 0 20px;\n    background-size: contain;\n    width: 500px;\n    height: 342px;\n    position: absolute;\n    z-index: 1;\n    top: 30px;\n    left: 30px;\n  }\n\n  &__base {\n    background: url(\"../../../../assets/toppings/base.svg\") no-repeat;\n    background-size: contain;\n    width: 390px;\n    height: 322px;\n    position: absolute;\n    right: 23px;\n    top: 30px;\n    z-index: 2;\n  }\n\n  &__toppings {\n    width: 352px;\n    height: 190px;\n    position: absolute;\n    right: 42px;\n    top: 46px;\n    z-index: 3;\n  }\n\n  &__topping {\n    position: absolute;\n    background-repeat: no-repeat;\n    background-size: contain;\n\n    &--anchovy {\n      background-image: url(\"../../../../assets/toppings/anchovy.svg\");\n      width: 51px;\n      height: 37px;\n\n      &:nth-child(1) {\n        left: 140px;\n        top: 26px;\n      }\n      &:nth-child(2) {\n        left: 8px;\n        top: 82px;\n      }\n      &:nth-child(3) {\n        left: 263px;\n        top: 95px;\n      }\n      &:nth-child(4), &:nth-child(5) {\n        display: none;\n      }\n    }\n    &--bacon {\n      background-image: url(\"../../../../assets/toppings/bacon.svg\");\n      width: 56px;\n      height: 31px;\n\n      &:nth-child(1) {\n        left: 124px;\n        top: 50px;\n      }\n      &:nth-child(2) {\n        left: 39px;\n        top: 100px;\n      }\n      &:nth-child(3) {\n        left: 132px;\n        top: 86px;\n      }\n      &:nth-child(4) {\n        left: 199px;\n        top: 59px;\n      }\n      &:nth-child(5) {\n        left: 140px;\n        top: 154px;\n      }\n    }\n    &--basil {\n      background-image: url(\"../../../../assets/toppings/basil.svg\");\n      width: 46px;\n      height: 32px;\n\n      &:nth-child(1) {\n        left: 136px;\n        top: 63px;\n      }\n      &:nth-child(2) {\n        left: 126px;\n        top: 127px;\n      }\n      &:nth-child(3) {\n        left: 222px;\n        top: 98px;\n      }\n      &:nth-child(4), &:nth-child(5) {\n        display: none;\n      }\n    }\n    &--chili {\n      background-image: url(\"../../../../assets/toppings/chili.svg\");\n      width: 63px;\n      height: 35px;\n\n      &:nth-child(1) {\n        left: 150px;\n        top: 40px;\n      }\n      &:nth-child(2) {\n        left: 68px;\n        top: 77px;\n      }\n      &:nth-child(3) {\n        left: 52px;\n        top: 144px;\n      }\n      &:nth-child(4) {\n        left: 210px;\n        top: 17px;\n      }\n      &:nth-child(5) {\n        left: 240px;\n        top: 120px;\n      }\n    }\n    &--mozzarella {\n      background-image: url(\"../../../../assets/toppings/mozzarella.svg\");\n      width: 46px;\n      height: 32px;\n\n      &:nth-child(1) {\n        left: 6px;\n        top: 106px;\n      }\n      &:nth-child(2) {\n        left: 186px;\n        top: 114px;\n      }\n      &:nth-child(3) {\n        left: 162px;\n        top: 8px;\n      }\n      &:nth-child(4), &:nth-child(5) {\n        display: none;\n      }\n    }\n    &--mushroom {\n      background-image: url(\"../../../../assets/toppings/mushroom.svg\");\n      width: 45px;\n      height: 26px;\n\n      &:nth-child(1) {\n        left: 120px;\n        top: 20px;\n      }\n      &:nth-child(2) {\n        left: 40px;\n        top: 60px;\n      }\n      &:nth-child(3) {\n        left: 90px;\n        top: 120px;\n      }\n      &:nth-child(4) {\n        left: 240px;\n        top: 30px;\n      }\n      &:nth-child(5) {\n        left: 220px;\n        top: 129px;\n      }\n    }\n    &--olive {\n      background-image: url(\"../../../../assets/toppings/olive.svg\");\n      width: 45px;\n      height: 26px;\n\n      &:nth-child(1) {\n        left: 161px;\n        top: 60px;\n      }\n      &:nth-child(2) {\n        left: 90px;\n        top: 57px;\n      }\n      &:nth-child(3) {\n        left: 110px;\n        top: 110px;\n      }\n      &:nth-child(4) {\n        left: 279px;\n        top: 47px;\n      }\n      &:nth-child(5) {\n        display: none;\n      }\n    }\n    &--onion {\n      background-image: url(\"../../../../assets/toppings/onion.svg\");\n      width: 57px;\n      height: 36px;\n\n      &:nth-child(1) {\n        left: 101px;\n        top: 55px;\n      }\n      &:nth-child(2) {\n        left: 10px;\n        top: 61px;\n      }\n      &:nth-child(3) {\n        left: 261px;\n        top: 55px;\n      }\n      &:nth-child(4) {\n        left: 172px;\n        top: 132px;\n      }\n      &:nth-child(5) {\n        display: none;\n      }\n    }\n    &--pepper {\n      background-image: url(\"../../../../assets/toppings/pepper.svg\");\n      width: 57px;\n      height: 36px;\n\n      &:nth-child(1) {\n        left: 122px;\n        top: 30px;\n      }\n      &:nth-child(2) {\n        left: 175px;\n        top: 87px;\n      }\n      &:nth-child(3) {\n        left: 30px;\n        top: 81px;\n      }\n      &:nth-child(4) {\n        left: 282px;\n        top: 69px;\n      }\n      &:nth-child(5) {\n        left: 105px;\n        top: 147px;\n      }\n    }\n    &--pepperoni {\n      background-image: url(\"../../../../assets/toppings/pepperoni.svg\");\n      width: 57px;\n      height: 36px;\n\n      &:nth-child(1) {\n        left: 222px;\n        top: 35px;\n      }\n      &:nth-child(2) {\n        left: 145px;\n        top: 107px;\n      }\n      &:nth-child(3) {\n        left: 81px;\n        top: 21px;\n      }\n      &:nth-child(4) {\n        left: 221px;\n        top: 80px;\n      }\n      &:nth-child(5) {\n        left: 75px;\n        top: 137px;\n      }\n    }\n    &--sweetcorn {\n      background-image: url(\"../../../../assets/toppings/sweetcorn.svg\");\n      width: 57px;\n      height: 36px;\n\n      &:nth-child(1) {\n        left: 192px;\n        top: 35px;\n      }\n      &:nth-child(2) {\n        left: 41px;\n        top: 41px;\n      }\n      &:nth-child(3) {\n        left: 212px;\n        top: 146px;\n      }\n      &:nth-child(4), &:nth-child(5) {\n        display: none;\n      }\n    }\n    &--tomato {\n      background-image: url(\"../../../../assets/toppings/tomato.svg\");\n      width: 57px;\n      height: 36px;\n\n      &:nth-child(1) {\n        left: 175px;\n        top: 147px;\n      }\n      &:nth-child(2) {\n        left: 41px;\n        top: 41px;\n      }\n      &:nth-child(3) {\n        left: 85px;\n        top: 100px;\n      }\n      &:nth-child(4) {\n        left: 280px;\n        top: 99px;\n      }\n      &:nth-child(5) {\n        display: none;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./pizza-preview.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "pizza": {
                    "name": "pizza",
                    "setSignature": {
                        "name": "pizza",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pizza",
                        "type": "any",
                        "returnType": "any",
                        "line": 36
                    }
                }
            },
            "templateData": "<div class=\"pizza-viewer\">\n  <div class=\"pizza-viewer__table-side\"></div>\n  <div class=\"pizza-viewer__table\"></div>\n  <div\n    class=\"pizza\"\n    *ngFor=\"let pizza of (pizza$ | async)\"\n    @slide>\n    <div class=\"pizza__board\"></div>\n    <div class=\"pizza__base\"></div>\n    <div class=\"pizza__toppings\">\n      <div\n        *ngFor=\"let topping of pizza.toppings; let i = index;\"\n        [style.zIndex]=\"i\"\n        @drop>\n        <div class=\"pizza__topping pizza__topping--{{ topping }}\"></div>\n        <div class=\"pizza__topping pizza__topping--{{ topping }}\"></div>\n        <div class=\"pizza__topping pizza__topping--{{ topping }}\"></div>\n        <div class=\"pizza__topping pizza__topping--{{ topping }}\"></div>\n        <div class=\"pizza__topping pizza__topping--{{ topping }}\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PizzaSmallPreviewComponent",
            "id": "component-PizzaSmallPreviewComponent-e4b04eda6d91cef5b8de267930ff03bc",
            "file": "src/app/modules/shared/pizza-small-preview/pizza-small-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pizza-small-preview",
            "styleUrls": [
                "./pizza-small-preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pizza-small-preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "toppings",
                    "defaultValue": "[\n    'anchovy',\n    'bacon',\n    'basil',\n    'chili',\n    /*  'mozzarella',\n      'mushroom',\n      'olive',\n      'onion',\n      'pepper',\n      'pepperoni',\n      'sweetcorn',\n      'tomato'*/\n  ] || undefined",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-pizza-small-preview',\n  templateUrl: './pizza-small-preview.component.html',\n  styleUrls: ['./pizza-small-preview.component.scss']\n})\nexport class PizzaSmallPreviewComponent implements OnInit {\n  @Input()\n  toppings = [\n    'anchovy',\n    'bacon',\n    'basil',\n    'chili',\n    /*  'mozzarella',\n      'mushroom',\n      'olive',\n      'onion',\n      'pepper',\n      'pepperoni',\n      'sweetcorn',\n      'tomato'*/\n  ] || undefined;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$topping-size: 10%;\n\n.pizza {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  z-index: 1;\n  transition: transform 0.2s;\n\n  &--active {\n    transform: translate3d(0, -30px, 0);\n  }\n\n  &__board {\n    background: url(\"../../../../assets/toppings/board.svg\") no-repeat 0 20px;\n    background-size: contain;\n    width: 200px;\n    height: 200px;\n    position: absolute;\n    z-index: 1;\n    top: 40px;\n    left: 16%;\n  }\n\n  &__base {\n    background: url(\"../../../../assets/toppings/base.svg\") no-repeat;\n    background-size: contain;\n    width: 160px;\n    height: 100px;\n    position: absolute;\n    left: 27%;\n    top: 50px;\n    z-index: 2;\n  }\n\n  &__toppings {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 3;\n  }\n\n  &__topping {\n    position: absolute;\n    background-repeat: no-repeat;\n    background-size: contain;\n\n    &--anchovy {\n      background-image: url(\"../../../../assets/toppings/anchovy.svg\");\n      width: $topping-size;\n      height: $topping-size;\n\n      &:nth-child(1) {\n        left: 34%;\n        top: 44%;\n      }\n\n      &:nth-child(2) {\n        left: 50%;\n        top: 30%;\n      }\n\n      &:nth-child(3) {\n        left: 67%;\n        top: 36%;\n      }\n\n      &:nth-child(4), &:nth-child(5) {\n        display: none;\n      }\n    }\n\n    &--bacon {\n      background-image: url(\"../../../../assets/toppings/bacon.svg\");\n      width: $topping-size;\n      height: $topping-size;\n\n      &:nth-child(1) {\n        left: 170px;\n        top: 80px;\n      }\n\n      &:nth-child(2) {\n        left: 100px;\n        top: 75px;\n      }\n\n      &:nth-child(3) {\n        left: 134px;\n        top: 123px;\n      }\n\n      &:nth-child(4) {\n        left: 170px;\n        top: 90px;\n      }\n\n      &:nth-child(5) {\n        left: 170px;\n        top: 80px;\n      }\n    }\n\n    &--basil {\n      background-image: url(\"../../../../assets/toppings/basil.svg\");\n      width: $topping-size;\n      height: $topping-size;\n\n      &:nth-child(1) {\n        left: 64%;\n        top: 36%;\n      }\n\n      &:nth-child(2) {\n        left: 57%;\n        top: 48%;\n      }\n\n      &:nth-child(3) {\n        left: 36%;\n        top: 32%;\n      }\n\n      &:nth-child(4), &:nth-child(5) {\n        display: none;\n      }\n    }\n\n    &--chili {\n      background-image: url(\"../../../../assets/toppings/chili.svg\");\n      width: $topping-size;\n      height: $topping-size;\n\n      &:nth-child(1) {\n        left: 48%;\n        top: 48%;\n      }\n\n      &:nth-child(2) {\n        left: 64%;\n        top: 32%;\n      }\n\n      &:nth-child(3) {\n        left: 52%;\n        top: 39%;\n      }\n\n      &:nth-child(4) {\n        left: 67%;\n        top: 44%;\n      }\n\n      &:nth-child(5) {\n        left: 34%;\n        top: 33%;\n      }\n    }\n\n    &--mozzarella {\n      background-image: url(\"../../../../assets/toppings/mozzarella.svg\");\n      width: $topping-size;\n      height: $topping-size;\n\n      &:nth-child(1) {\n        left: 150px;\n        top: 116px;\n      }\n\n      &:nth-child(2) {\n        left: 186px;\n        top: 78px;\n      }\n\n      &:nth-child(3) {\n        left: 130px;\n        top: 80px;\n      }\n\n      &:nth-child(4), &:nth-child(5) {\n        display: none;\n      }\n    }\n\n    &--mushroom {\n      background-image: url(\"../../../../assets/toppings/mushroom.svg\");\n      width: $topping-size;\n      height: $topping-size;\n\n      &:nth-child(1) {\n        left: 180px;\n        top: 78px;\n      }\n\n      &:nth-child(2) {\n        left: 110px;\n        top: 90px;\n      }\n\n      &:nth-child(3) {\n        left: 130px;\n        top: 120px;\n      }\n\n      &:nth-child(4) {\n        left: 150px;\n        top: 70px;\n      }\n\n      &:nth-child(5) {\n        left: 130px;\n        top: 70px;\n      }\n    }\n\n    &--olive {\n      background-image: url(\"../../../../assets/toppings/olive.svg\");\n      width: $topping-size;\n      height: $topping-size;\n\n      &:nth-child(1) {\n        left: 48%;\n        top: 56%;\n      }\n\n      &:nth-child(2) {\n        left: 58%;\n        top: 36%;\n      }\n\n      &:nth-child(3) {\n        left: 52%;\n        top: 42%;\n      }\n\n      &:nth-child(4) {\n        left: 67%;\n        top: 37%;\n      }\n\n      &:nth-child(5) {\n        left: 34%;\n        top: 46%;\n      }\n    }\n\n    &--onion {\n      background-image: url(\"../../../../assets/toppings/onion.svg\");\n      width: $topping-size;\n      height: $topping-size;\n\n      &:nth-child(1) {\n        left: 40%;\n        top: 48%;\n      }\n\n      &:nth-child(2) {\n        left: 52%;\n        top: 32%;\n      }\n\n      &:nth-child(3) {\n        left: 37%;\n        top: 39%;\n      }\n\n      &:nth-child(4) {\n        left: 63%;\n        top: 44%;\n      }\n\n      &:nth-child(5) {\n        left: 34%;\n        top: 33%;\n      }\n    }\n\n    &--pepper {\n      background-image: url(\"../../../../assets/toppings/pepper.svg\");\n      width: 20px;\n      height: 20px;\n\n      &:nth-child(1) {\n        left: 48%;\n        top: 48%;\n      }\n\n      &:nth-child(2) {\n        left: 64%;\n        top: 32%;\n      }\n\n      &:nth-child(3) {\n        left: 52%;\n        top: 39%;\n      }\n\n      &:nth-child(4) {\n        left: 67%;\n        top: 44%;\n      }\n\n      &:nth-child(5) {\n        left: 34%;\n        top: 33%;\n      }\n    }\n\n    &--pepperoni {\n      background-image: url(\"../../../../assets/toppings/pepperoni.svg\");\n      width: 20px;\n      height: 20px;\n\n      &:nth-child(1) {\n        left: 180px;\n        top: 72px;\n      }\n\n      &:nth-child(2) {\n        left: 110px;\n        top: 80px;\n      }\n\n      &:nth-child(3) {\n        left: 130px;\n        top: 110px;\n      }\n\n      &:nth-child(4) {\n        left: 160px;\n        top: 120px;\n      }\n\n      &:nth-child(5) {\n        left: 140px;\n        top: 120px;\n      }\n    }\n\n    &--sweetcorn {\n      background-image: url(\"../../../../assets/toppings/sweetcorn.svg\");\n      width: 20px;\n      height: 20px;\n\n      &:nth-child(1) {\n        left: 48%;\n        top: 48%;\n      }\n\n      &:nth-child(2) {\n        left: 64%;\n        top: 32%;\n      }\n\n      &:nth-child(3) {\n        left: 52%;\n        top: 39%;\n      }\n\n      &:nth-child(4), &:nth-child(5) {\n        display: none;\n      }\n    }\n\n    &--tomato {\n      background-image: url(\"../../../../assets/toppings/tomato.svg\");\n      width: 20px;\n      height: 20px;\n\n      &:nth-child(1) {\n        left: 180px;\n        top: 78px;\n      }\n\n      &:nth-child(2) {\n        left: 110px;\n        top: 80px;\n      }\n\n      &:nth-child(3) {\n        left: 130px;\n        top: 100px;\n      }\n\n      &:nth-child(4) {\n        left: 150px;\n        top: 60px;\n      }\n\n      &:nth-child(5) {\n        display: none;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./pizza-small-preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"pizza\">\n  <div class=\"pizza__board\"></div>\n  <div class=\"pizza__base\"></div>\n  <div class=\"pizza__toppings\">\n    <div\n      *ngFor=\"let topping of toppings; let i = index;\"\n      [style.zIndex]=\"i\">\n      <div class=\"pizza__topping pizza__topping--{{topping}}\"></div>\n      <div class=\"pizza__topping pizza__topping--{{topping}}\"></div>\n      <div class=\"pizza__topping pizza__topping--{{topping}}\"></div>\n      <div class=\"pizza__topping pizza__topping--{{topping}}\"></div>\n      <div class=\"pizza__topping pizza__topping--{{topping}}\"></div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PizzaToppingsComponent",
            "id": "component-PizzaToppingsComponent-c160a05f3e557167b69a11ed9d6422c8",
            "file": "src/app/modules/shared/pizza-toppings/pizza-toppings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "PIZZA_TOPPINGS_ACCESSOR"
                }
            ],
            "selector": "app-pizza-toppings",
            "styleUrls": [
                "./pizza-toppings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pizza-toppings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "focused",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "onModelChange",
                    "type": " | undefined",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "onTouch",
                    "type": " | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "toppings",
                    "defaultValue": "[\n    'anchovy', 'bacon', 'basil', 'chili', 'mozzarella', 'mushroom',\n    'olive', 'onion', 'pepper', 'pepperoni', 'sweetcorn', 'tomato'\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "value",
                    "defaultValue": "[]",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTopping",
                    "args": [
                        {
                            "name": "topping",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "topping",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, forwardRef} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nconst PIZZA_TOPPINGS_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => PizzaToppingsComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'app-pizza-toppings',\n  providers: [PIZZA_TOPPINGS_ACCESSOR],\n  templateUrl: './pizza-toppings.component.html',\n  styleUrls: ['./pizza-toppings.component.scss'],\n})\nexport class PizzaToppingsComponent implements ControlValueAccessor {\n  toppings = [\n    'anchovy', 'bacon', 'basil', 'chili', 'mozzarella', 'mushroom',\n    'olive', 'onion', 'pepper', 'pepperoni', 'sweetcorn', 'tomato'\n  ];\n\n  value: string | string[] = [];\n  focused: string | undefined;\n\n  onTouch: (() => void | undefined) | undefined;\n  onModelChange: (() => void | undefined) | undefined;\n\n  registerOnChange(fn: () => void | undefined): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: () => void | undefined): void {\n    this.onTouch = fn;\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  updateTopping(topping: string): void {\n    if (this.value.includes(topping)) {\n      if (typeof this.value !== 'string') {\n        this.value = this.value.filter((x: string) => topping !== x);\n      }\n    } else {\n      // @ts-ignore\n      this.value = this.value.concat([topping]);\n    }\n    // @ts-ignore\n    this.onModelChange(this.value);\n  }\n\n  onBlur(value: string): void {\n    this.focused = '';\n  }\n\n  onFocus(value: string): void {\n    this.focused = value;\n    // @ts-ignore\n    this.onTouch();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pizza-toppings {\n  display: flex;\n  margin-bottom: 40px;\n  max-width: 1280px;\n  width: 100%;\n  flex-wrap: wrap;\n\n  .pizza-topping {\n    background-color: #e5f1fd;\n    color: rgba(#000, 0.5);\n    font-weight: 900;\n    height: 36px;\n    width: fit-content;\n    margin-right: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 36px;\n    padding: 0 20px;\n    cursor: pointer;\n    transition: 200ms ease-out;\n    user-select: none;\n    margin-bottom: 12px;\n\n    &:hover {\n      background-color: rgba(aliceblue, 0.8);\n      color: black;\n    }\n\n    input {\n      border: 0;\n      clip: rect(0 0 0 0);\n      height: 1px;\n      margin: -1px;\n      overflow: hidden;\n      padding: 0;\n      position: absolute;\n      width: 1px;\n    }\n\n    &--active {\n      background-color: rgba(aliceblue, 0.8);\n      color: black;\n    }\n  }\n}\n",
                    "styleUrl": "./pizza-toppings.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"pizza-toppings\">\n  <label\n    *ngFor=\"let topping of toppings\"\n    class=\"pizza-topping\"\n    [class.pizza-topping--active]=\"value.includes(topping)\"\n    [class.pizza-topping--focused]=\"focused === topping\">\n    <input\n      type=\"checkbox\"\n      [attr.name]=\"topping\"\n      [attr.value]=\"topping\"\n      (blur)=\"onBlur(topping)\"\n      (change)=\"updateTopping(topping)\"\n      (focus)=\"onFocus(topping)\"\n      [checked]=\"value.includes(topping)\">\n    <span class=\"pizza-topping__icon pizza-topping__icon--{{ topping }}\"></span>\n    {{ topping | titlecase }}\n  </label>\n</div>\n"
        },
        {
            "name": "RestaurantCardComponent",
            "id": "component-RestaurantCardComponent-1d83310feb8d6f9c845336cca3680fef",
            "file": "src/app/modules/shared/restaurant-card/restaurant-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-restaurant-card",
            "styleUrls": [
                "./restaurant-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./restaurant-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cursor",
                    "defaultValue": "CursorType.Pointer",
                    "line": 17
                },
                {
                    "name": "model",
                    "line": 16,
                    "type": "Restaurant | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cursorTypes",
                    "defaultValue": "CursorType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Restaurant } from '../../../models/restaurants/restaurant';\n\nexport enum CursorType {\n  Default,\n  Pointer\n}\n\n@Component({\n  selector: 'app-restaurant-card',\n  templateUrl: './restaurant-card.component.html',\n  styleUrls: ['./restaurant-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RestaurantCardComponent {\n  @Input() model?: Restaurant | null;\n  @Input() cursor = CursorType.Pointer;\n  readonly cursorTypes = CursorType;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".restaurant-card {\n  max-width: 720px;\n  min-width: 240px;\n  width: 100%;\n  min-height: 240px;\n  max-height: 340px;\n  height: 100%;\n  background-color: #ffffff;\n  cursor: pointer;\n  border-radius: 8px;\n  transition: .2s ease-out;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n\n  &--default-cursor {\n    cursor: default;\n  }\n\n  &__poster {\n    height: 70%;\n    background-color: #b8c1b8;\n    background-image: url(\"../../../../assets/icons/pizza.svg\");\n    background-repeat: no-repeat;\n    background-position: center;\n  }\n\n  &__description {\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 4px 24px;\n    height: 30%;\n    font-size: 12pt;\n\n    &__bottom {\n      display: flex;\n      justify-content: space-between;\n    }\n  }\n}\n\n.rating {\n  font-weight: bold;\n  font-size: 12pt;\n  display: flex;\n  align-items: center;\n}\n\n.title {\n  margin-bottom: 4px;\n}\n",
                    "styleUrl": "./restaurant-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"restaurant-card\"\n     [ngClass]=\"{'restaurant-card--default-cursor': cursor === cursorTypes.Default}\">\n  <div class=\"restaurant-card__poster\"></div>\n  <div class=\"restaurant-card__description\">\n    <div class=\"title\">{{ model?.name }}</div>\n   <div class=\"restaurant-card__description__bottom\">\n     <div class=\"address\">{{ model?.address }}</div>\n     <div class=\"rating\">\n       {{ model?.rating }}\n       <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" viewBox=\"0 0 24 24\" width=\"16\">\n         <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n         <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n         <path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"/>\n       </svg>\n     </div>\n   </div>\n  </div>\n</div>\n"
        },
        {
            "name": "RestaurantComponent",
            "id": "component-RestaurantComponent-9127881ad0ca6791e1c1200b8d846c3a",
            "file": "src/app/modules/client/restaurant/restaurant.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pizzas",
            "styleUrls": [
                "./restaurant.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./restaurant.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cursorTypes",
                    "defaultValue": "CursorType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    toppings: [[]]\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.store.pipe(\n    select(PizzasStoreSelectors.getLoadingState),\n    takeUntil(this.unsubscribe)\n  )",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "pizzas$",
                    "defaultValue": "combineLatest([\n    this.form.controls.toppings.valueChanges,\n    this.pizzasResponse$\n  ]).pipe(\n    map((results) => {\n      const toppings = results[0];\n      const pizzasResponse = results[1];\n\n      if (toppings.length > 0) {\n        // @ts-ignore\n        return pizzasResponse.pizzas.filter(pizza =>\n          // @ts-ignore\n          toppings.some((topping: any) => pizza.toppings.includes(topping))\n        );\n      } else {\n        return pizzasResponse.pizzas;\n      }\n    })\n  )",
                    "type": "Observable<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "pizzasResponse$",
                    "defaultValue": "this.store.pipe(\n    select(PizzasStoreSelectors.getPizzasResponseState),\n    takeUntil(this.unsubscribe)\n  )",
                    "type": "Observable<GetPizzasResponse>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "restaurant",
                    "defaultValue": "this.restaurantsService.getRestaurant('0')",
                    "type": "Observable<Restaurant>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {AfterContentChecked, Component, OnDestroy, OnInit} from '@angular/core';\nimport {combineLatest, Observable, Subject} from 'rxjs';\nimport {select, Store} from '@ngrx/store';\nimport {map, takeUntil} from 'rxjs/operators';\nimport {FormBuilder} from '@angular/forms';\nimport {animate, query, stagger, style, transition, trigger} from '@angular/animations';\nimport {PizzasStoreActions, PizzasStoreSelectors,} from '../../../store/root/client';\nimport {GetPizzasResponse} from '../../../models';\nimport {RootStoreState} from '../../../store/root';\nimport {RestaurantsService} from '../../../services/restaurants/restaurants.service';\nimport {Restaurant} from '../../../models/restaurants/restaurant';\nimport {CursorType} from '../../shared/restaurant-card/restaurant-card.component';\nimport {Unsubscribe} from '../../../components/unsubscribe.interface';\n\n@Component({\n  selector: 'app-pizzas',\n  templateUrl: './restaurant.component.html',\n  styleUrls: ['./restaurant.component.scss'],\n  animations: [\n    trigger('listAnimation', [\n      transition('* <=> *', [\n        query(':enter',\n          [style({opacity: 0}), stagger('100ms', animate('600ms ease-out', style({opacity: 1})))],\n          {optional: true}\n        ),\n      ])\n    ])\n  ]\n})\nexport class RestaurantComponent implements OnInit, AfterContentChecked, OnDestroy, Unsubscribe {\n  readonly cursorTypes = CursorType;\n  readonly unsubscribe = new Subject<void>();\n\n  readonly restaurant: Observable<Restaurant> = this.restaurantsService.getRestaurant('0');\n\n  form = this.fb.group({\n    toppings: [[]]\n  });\n\n  pizzasResponse$: Observable<GetPizzasResponse> = this.store.pipe(\n    select(PizzasStoreSelectors.getPizzasResponseState),\n    takeUntil(this.unsubscribe)\n  );\n\n  // @ts-ignore\n  pizzas$: Observable<any[]> = combineLatest([\n    this.form.controls.toppings.valueChanges,\n    this.pizzasResponse$\n  ]).pipe(\n    map((results) => {\n      const toppings = results[0];\n      const pizzasResponse = results[1];\n\n      if (toppings.length > 0) {\n        // @ts-ignore\n        return pizzasResponse.pizzas.filter(pizza =>\n          // @ts-ignore\n          toppings.some((topping: any) => pizza.toppings.includes(topping))\n        );\n      } else {\n        return pizzasResponse.pizzas;\n      }\n    })\n  );\n\n  loading$: Observable<boolean> = this.store.pipe(\n    select(PizzasStoreSelectors.getLoadingState),\n    takeUntil(this.unsubscribe)\n  );\n\n  constructor(\n    private store: Store<RootStoreState.State>,\n    private restaurantsService: RestaurantsService,\n    private fb: FormBuilder\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(new PizzasStoreActions.GetPizzas());\n  }\n\n  ngAfterContentChecked(): void {\n    this.form.controls.toppings.enable();\n  }\n\n\n  ngOnDestroy(): void {\n    this.unsubscribe.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  max-width: 1280px;\n  width: 100%;\n  margin: 20px auto;\n  flex-direction: column;\n}\n\n.breadcrumbs {\n  margin-bottom: 24px;\n}\n\n.pizzas {\n  display: flex;\n  flex-wrap: wrap;\n}\n\nh1 {\n  margin: 20px 0;\n  color: #1A1A1A;\n}\n\n.filter {\n  display: flex;\n  margin-bottom: 40px;\n\n  span {\n    background-color: #e5f1fd;\n    color: rgba(#000, 0.5);\n    font-weight: 900;\n    height: 36px;\n    width: fit-content;\n    margin-right: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 36px;\n    padding: 0 20px;\n    cursor: pointer;\n    transition: 200ms ease-out;\n\n    &:hover {\n      background-color: rgba(aliceblue, 0.8);\n      color: black;\n    }\n  }\n}\n\n.pizza-card {\n  margin-right: 30px;\n  margin-bottom: 20px;\n}\n\n.pizza {\n  background-color: red;\n  width: 300px;\n  height: 400px;\n  margin-right: 30px;\n  margin-bottom: 20px;\n}\n\n@keyframes placeHolderShimmer {\n  0% {\n    background-position: -468px 0\n  }\n  100% {\n    background-position: 468px 0\n  }\n}\n\n.animate-background {\n  animation-duration: 1.25s;\n  animation-fill-mode: forwards;\n  animation-iteration-count: infinite;\n  animation-name: placeHolderShimmer;\n  animation-timing-function: linear;\n  background: darkgray;\n  background: linear-gradient(to right, #eeeeee 10%, #dddddd 18%, #eeeeee 33%);\n  background-size: 800px 104px;\n  position: relative;\n}\n",
                    "styleUrl": "./restaurant.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>"
                    },
                    {
                        "name": "restaurantsService",
                        "type": "RestaurantsService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<RootStoreState.State>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "restaurantsService",
                        "type": "RestaurantsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentChecked",
                "OnDestroy",
                "Unsubscribe"
            ],
            "templateData": "<div class=\"container\" [formGroup]=\"form\">\n  <app-breadcrumbs class=\"breadcrumbs\" path=\"restaurants\"></app-breadcrumbs>\n  <app-restaurant-card\n    [style]=\"{'height': '340px'}\"\n    [model]=\"restaurant | async\"\n    [cursor]=\"cursorTypes.Default\"\n  ></app-restaurant-card>\n  <h1>Pizzas</h1>\n  <div class=\"filter\">\n    <app-pizza-toppings formControlName=\"toppings\"></app-pizza-toppings>\n  </div>\n  <div class=\"pizzas\"\n       *ngIf=\"!(loading$ | async); else preloader\"\n       [@listAnimation]=\"(pizzas$ | async)?.length\">\n    <ng-container *ngFor=\"let pizza of (pizzas$ | async)\">\n      <app-pizza-card [pizza]=\"pizza\" class=\"pizza-card\"></app-pizza-card>\n    </ng-container>\n  </div>\n  <ng-template #preloader>\n    <div class=\"pizzas\" *ngIf=\"(loading$ | async)\">\n      <div class=\"pizza animate-background\"></div>\n      <div class=\"pizza animate-background\"></div>\n      <div class=\"pizza animate-background\"></div>\n    </div>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "RestaurantsComponent",
            "id": "component-RestaurantsComponent-60309b153150d9f270b0b5928dc5f9f0",
            "file": "src/app/modules/client/restaurants/restaurants.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-restaurants",
            "styleUrls": [
                "./restaurants.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./restaurants.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "restaurants",
                    "defaultValue": "this.restaurantsService.getRestaurants()",
                    "type": "Observable<Restaurant[]>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RestaurantsService } from '../../../services/restaurants/restaurants.service';\nimport { Observable } from 'rxjs';\nimport { Restaurant } from '../../../models/restaurants/restaurant';\n\n@Component({\n  selector: 'app-restaurants',\n  templateUrl: './restaurants.component.html',\n  styleUrls: ['./restaurants.component.scss']\n})\nexport class RestaurantsComponent {\n  readonly restaurants: Observable<Restaurant[]> = this.restaurantsService.getRestaurants();\n\n  constructor(private restaurantsService: RestaurantsService) { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search-container {\n  display: flex;\n  align-items: center;\n  height: 120px;\n  margin-bottom: 40px;\n}\n\n.search {\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  max-width: 680px;\n  width: 100%;\n}\n\n.restaurants {\n  margin: 24px auto;\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 40px;\n  grid-auto-rows: minmax(100px, auto);\n}\n",
                    "styleUrl": "./restaurants.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "restaurantsService",
                        "type": "RestaurantsService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "restaurantsService",
                        "type": "RestaurantsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": " <div class=\"wrapper\">\n  <h1>Restaurants</h1>\n  <div class=\"restaurants\">\n    <app-restaurant-card\n      *ngFor=\"let restaurant of restaurants | async\"\n      [routerLink]=\"restaurant?.id\"\n      [model]=\"restaurant\"\n    ></app-restaurant-card>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "RootStoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppStoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BasketModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BasketComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BasketRoutingModule"
                        },
                        {
                            "name": "NavbarModule"
                        },
                        {
                            "name": "PizzaCardModule"
                        },
                        {
                            "name": "PizzaPreviewModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BasketRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BreadcrumbsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BreadcrumbsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BreadcrumbsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClientModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClientComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClientRoutingModule"
                        },
                        {
                            "name": "NavbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClientRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClientStoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "NavbarModule"
                        },
                        {
                            "name": "RestaurantCardModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavbarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavbarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PizzaCardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PizzaCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "PizzaSmallPreviewModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PizzaCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PizzaPreviewModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PizzaPreviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PizzaPreviewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PizzaSmallPreviewModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PizzaSmallPreviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PizzaSmallPreviewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PizzaToppingsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PizzaToppingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PizzaToppingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RestaurantCardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RestaurantCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "PizzaSmallPreviewModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RestaurantCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RestaurantModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RestaurantComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BreadcrumbsModule"
                        },
                        {
                            "name": "NavbarModule"
                        },
                        {
                            "name": "PizzaCardModule"
                        },
                        {
                            "name": "PizzaToppingsModule"
                        },
                        {
                            "name": "RestaurantCardModule"
                        },
                        {
                            "name": "RestaurantRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RestaurantRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RestaurantsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RestaurantsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NavbarModule"
                        },
                        {
                            "name": "RestaurantCardModule"
                        },
                        {
                            "name": "RestaurantsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RestaurantsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RootStoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppStoreModule"
                        },
                        {
                            "name": "ClientStoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/shared/restaurant-card/restaurant-card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DROP_ANIMATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/shared/pizza-preview/pizza-preview.component.ts",
                "type": "",
                "defaultValue": "trigger('drop', [\n  transition(':enter', [\n    style({ transform: 'translateY(-200px)', opacity: 0 }),\n    animate('200ms 300ms', style({ transform: 'translateY(0)', opacity: 1 }))\n  ]),\n])"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  host: 'localhost'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  host: 'localhost'\n}"
            },
            {
                "name": "FEATURE_REDUCER_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/client-store.module.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ActionReducerMap<ClientStoreState.State>>('Client Feature Reducers')"
            },
            {
                "name": "getAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/app/selectors.ts",
                "type": "",
                "defaultValue": "(state: RootStoreState.State) => state.app"
            },
            {
                "name": "getBasketState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/basket/basket.selectors.ts",
                "type": "",
                "defaultValue": "(state: RootStoreState.State) => state.client.basket"
            },
            {
                "name": "getErrorsResponseState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/app/selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getAppState,\n  (state: State) => state.errorResponse,\n)"
            },
            {
                "name": "getLoadingState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/pizzas/pizzas.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getPizzasState,\n  (state: State) => state.loading,\n)"
            },
            {
                "name": "getPizzasCountState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/basket/basket.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getPizzasResponseState,\n  // @ts-ignore\n  (state: GetPizzasResponse) => {\n    if (state.pizzas) {\n      return state.pizzas.length;\n    }\n  },\n)"
            },
            {
                "name": "getPizzasResponseState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/basket/basket.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  // @ts-ignore\n  getBasketState,\n  (state: State) => state.pizzasResponse,\n)"
            },
            {
                "name": "getPizzasResponseState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/pizzas/pizzas.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getPizzasState,\n  (state: State) => state.pizzasResponse,\n)"
            },
            {
                "name": "getPizzasState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/pizzas/pizzas.selectors.ts",
                "type": "",
                "defaultValue": "(state: RootStoreState.State) => state.client.pizzas"
            },
            {
                "name": "getRestaurantsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/restaurants/restaurants.selectors.ts",
                "type": "",
                "defaultValue": "(state: RootStoreState.State) => state.client.restaurants"
            },
            {
                "name": "getTotalState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/basket/basket.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getPizzasResponseState,\n  // @ts-ignore\n  (state: GetPizzasResponse) => {\n    if (state.pizzas) {\n      return state.pizzas.map(pizza => pizza.price).reduce(\n        // @ts-ignore\n        (accumulator, currentValue) => accumulator + currentValue,\n      );\n    }\n  },\n)"
            },
            {
                "name": "getUserResponseState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/user/user.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getUserState,\n  (state: State) => state.userResponse,\n)"
            },
            {
                "name": "getUserState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/user/user.selectors.ts",
                "type": "",
                "defaultValue": "(state: RootStoreState.State) => state.client.user"
            },
            {
                "name": "getUserTokenState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/user/user.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getUserState,\n  (state: State) => state.userTokenResponse.token,\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/state.ts",
                "type": "State",
                "defaultValue": "{\n  app: AppStoreState.initialState,\n  client: ClientStoreState.initialState,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/app/state.ts",
                "type": "State",
                "defaultValue": "{\n  errorResponse: new ResponseError(),\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/state.ts",
                "type": "State",
                "defaultValue": "{\n  user: UserStoreState.initialState,\n  pizzas: PizzasStoreState.initialState,\n  basket: BasketStoreState.initialState,\n  restaurants: RestaurantsStoreState.initialState,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/basket/basket.state.ts",
                "type": "State",
                "defaultValue": "{\n  pizzasResponse: {\n    pizzas: mockGetPizzasResponse?.pizzas?.slice(0, 2),\n  },\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/pizzas/pizzas.state.ts",
                "type": "State",
                "defaultValue": "{\n  pizzasResponse: {\n    pizzas: [],\n  },\n  toppingsResponse: [\n    'anchovy', 'bacon', 'basil', 'chili', 'mozzarella', 'mushroom',\n    'olive', 'onion', 'pepper', 'pepperoni', 'sweetcorn', 'tomato',\n  ],\n  loading: false,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/restaurants/restaurants.state.ts",
                "type": "State",
                "defaultValue": "{\n  restaurants: []\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/user/user.state.ts",
                "type": "State",
                "defaultValue": "{\n  logined: false,\n  userTokenResponse: {\n    token: 'TOKEN',\n    expiresAt: 'DATE',\n  },\n  userResponse: {\n    name: 'Username',\n  },\n}"
            },
            {
                "name": "loadRestaurants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                "type": "",
                "defaultValue": "createAction(`${PREFIX} Load Restaurants`,\n  props<{ query?: string }>())"
            },
            {
                "name": "loadRestaurantsError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                "type": "",
                "defaultValue": "createAction(`${PREFIX} Load Restaurants Error`)"
            },
            {
                "name": "loadRestaurantsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                "type": "",
                "defaultValue": "createAction(`${PREFIX} Load Restaurants Success`,\n  props<{ response: Restaurant[] }>())"
            },
            {
                "name": "mockErrorResponse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mocks/error/error-response.mock.ts",
                "type": "",
                "defaultValue": "new ResponseError()"
            },
            {
                "name": "mockGetPizzasResponse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mocks/pizzas/get-pizzas-response.mock.ts",
                "type": "",
                "defaultValue": "new GetPizzasResponse()"
            },
            {
                "name": "mockPizza",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mocks/pizzas/pizza.mock.ts",
                "type": "object",
                "defaultValue": "{\n  id: '0',\n  name: 'Margherita',\n  description: 'PIZZA_DESCRIPTION_0',\n  toppings: ['anchovy', 'basil', 'mozzarella', 'tomato'],\n  price: 100,\n}"
            },
            {
                "name": "mockRestaurants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mocks/restaurants/restaurants.mock.ts",
                "type": "Restaurant[]",
                "defaultValue": "[]"
            },
            {
                "name": "mockUserLoginRequest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mocks/user/user-login-request.mock.ts",
                "type": "",
                "defaultValue": "new UserLoginRequest()"
            },
            {
                "name": "mockUserLoginResponse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mocks/user/user-login-response.mock.ts",
                "type": "",
                "defaultValue": "new UserLoginResponse()"
            },
            {
                "name": "mockUserToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mocks/user/user-token.mock.ts",
                "type": "string",
                "defaultValue": "'USER_TOKEN'"
            },
            {
                "name": "PIZZA_TOPPINGS_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/shared/pizza-toppings/pizza-toppings.component.ts",
                "type": "object",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => PizzaToppingsComponent),\n  multi: true\n}"
            },
            {
                "name": "PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                "type": "string",
                "defaultValue": "'[Restaurants]'"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "scoreboardReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/client/restaurants/restaurants.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(loadRestaurants, state => ({ ...state })),\n  on(loadRestaurantsSuccess, (state, { response }) => ({ ...state, restaurants: response })),\n  on(loadRestaurantsError, state => ({ ...state })),\n)"
            },
            {
                "name": "selectRouter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/router/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<RouterReducerState<RouterStateUrl>>('router')"
            },
            {
                "name": "SLIDE_ANIMATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/shared/pizza-preview/pizza-preview.component.ts",
                "type": "",
                "defaultValue": "trigger('slide', [\n  transition(':enter', [\n    style({ transform: 'translate3d(-400px, -400px, 0px)' }),\n    animate('300ms 100ms', style({ transform: 'translate3d(0px, 0px, 0px)'})),\n    query('@drop', [\n      animateChild()\n    ]),\n  ]),\n  transition(':leave', [\n    style({ transform: 'translate3d(0px, 0px, 0px)' }),\n    animate('200ms', style({ transform: 'translate3d(-400px, -400px, 0px)'})),\n  ])\n])"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/shared/restaurant-card/restaurant-card.stories.ts",
                "type": "Story<RestaurantCardComponent>",
                "defaultValue": "(args: RestaurantCardComponent) => ({\n  component: RestaurantCardComponent,\n  props: args,\n})"
            },
            {
                "name": "type",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uikit/button/button.stories.ts",
                "type": "",
                "defaultValue": "ButtonType.SUCCESS"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/root/router/index.ts",
                "type": "",
                "defaultValue": "getSelectors(selectRouter)"
            }
        ],
        "functions": [
            {
                "name": "getReducers",
                "file": "src/app/store/root/client/client-store.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "ActionReducerMap<ClientStoreState.State>"
            },
            {
                "name": "reducer",
                "file": "src/app/store/root/app/reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/root/client/basket/basket.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/root/client/pizzas/pizzas.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/root/client/restaurants/restaurants.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/root/client/user/user.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AddErrorResponse",
                "file": "src/app/store/root/app/actions.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AddPizza",
                "file": "src/app/store/root/client/basket/basket.actions.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "GetPizzas | GetPizzasSuccess | GetPizzasFailure",
                "file": "src/app/store/root/client/pizzas/pizzas.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Login | LoginSuccess | LoginFailure",
                "file": "src/app/store/root/client/user/user.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "ActionTypes",
                "childs": [
                    {
                        "name": "AddErrorResponse",
                        "value": "[Errors] Add Error Response"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/root/app/actions.ts"
            },
            {
                "name": "ActionTypes",
                "childs": [
                    {
                        "name": "AddPizza",
                        "value": "[Basket] Add Pizza"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/root/client/basket/basket.actions.ts"
            },
            {
                "name": "ActionTypes",
                "childs": [
                    {
                        "name": "GetPizzas",
                        "value": "[Pizzas] Get Pizzas"
                    },
                    {
                        "name": "GetPizzasSuccess",
                        "value": "[Pizzas] Get Pizzas Success"
                    },
                    {
                        "name": "GetPizzasFailure",
                        "value": "[Pizzas] Get Pizzas Failure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/root/client/pizzas/pizzas.actions.ts"
            },
            {
                "name": "ActionTypes",
                "childs": [
                    {
                        "name": "Login",
                        "value": "[User] Login"
                    },
                    {
                        "name": "LoginSuccess",
                        "value": "[User] Login Success"
                    },
                    {
                        "name": "LoginFailure",
                        "value": "[User] Login Failure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/root/client/user/user.actions.ts"
            },
            {
                "name": "ButtonType",
                "childs": [
                    {
                        "name": "DEFAULT",
                        "value": "default"
                    },
                    {
                        "name": "SUCCESS",
                        "value": "success"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/uikit/button/button.component.ts"
            },
            {
                "name": "CursorType",
                "childs": [
                    {
                        "name": "Default"
                    },
                    {
                        "name": "Pointer"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/modules/shared/restaurant-card/restaurant-card.component.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/modules/shared/restaurant-card/restaurant-card.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/shared/restaurant-card/restaurant-card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/shared/restaurant-card/restaurant-card.stories.ts",
                    "type": "Story<RestaurantCardComponent>",
                    "defaultValue": "(args: RestaurantCardComponent) => ({\n  component: RestaurantCardComponent,\n  props: args,\n})"
                }
            ],
            "src/app/modules/shared/pizza-preview/pizza-preview.component.ts": [
                {
                    "name": "DROP_ANIMATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/shared/pizza-preview/pizza-preview.component.ts",
                    "type": "",
                    "defaultValue": "trigger('drop', [\n  transition(':enter', [\n    style({ transform: 'translateY(-200px)', opacity: 0 }),\n    animate('200ms 300ms', style({ transform: 'translateY(0)', opacity: 1 }))\n  ]),\n])"
                },
                {
                    "name": "SLIDE_ANIMATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/shared/pizza-preview/pizza-preview.component.ts",
                    "type": "",
                    "defaultValue": "trigger('slide', [\n  transition(':enter', [\n    style({ transform: 'translate3d(-400px, -400px, 0px)' }),\n    animate('300ms 100ms', style({ transform: 'translate3d(0px, 0px, 0px)'})),\n    query('@drop', [\n      animateChild()\n    ]),\n  ]),\n  transition(':leave', [\n    style({ transform: 'translate3d(0px, 0px, 0px)' }),\n    animate('200ms', style({ transform: 'translate3d(-400px, -400px, 0px)'})),\n  ])\n])"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  host: 'localhost'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  host: 'localhost'\n}"
                }
            ],
            "src/app/store/root/client/client-store.module.ts": [
                {
                    "name": "FEATURE_REDUCER_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/client-store.module.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ActionReducerMap<ClientStoreState.State>>('Client Feature Reducers')"
                }
            ],
            "src/app/store/root/app/selectors.ts": [
                {
                    "name": "getAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/app/selectors.ts",
                    "type": "",
                    "defaultValue": "(state: RootStoreState.State) => state.app"
                },
                {
                    "name": "getErrorsResponseState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/app/selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getAppState,\n  (state: State) => state.errorResponse,\n)"
                }
            ],
            "src/app/store/root/client/basket/basket.selectors.ts": [
                {
                    "name": "getBasketState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/basket/basket.selectors.ts",
                    "type": "",
                    "defaultValue": "(state: RootStoreState.State) => state.client.basket"
                },
                {
                    "name": "getPizzasCountState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/basket/basket.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getPizzasResponseState,\n  // @ts-ignore\n  (state: GetPizzasResponse) => {\n    if (state.pizzas) {\n      return state.pizzas.length;\n    }\n  },\n)"
                },
                {
                    "name": "getPizzasResponseState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/basket/basket.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  // @ts-ignore\n  getBasketState,\n  (state: State) => state.pizzasResponse,\n)"
                },
                {
                    "name": "getTotalState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/basket/basket.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getPizzasResponseState,\n  // @ts-ignore\n  (state: GetPizzasResponse) => {\n    if (state.pizzas) {\n      return state.pizzas.map(pizza => pizza.price).reduce(\n        // @ts-ignore\n        (accumulator, currentValue) => accumulator + currentValue,\n      );\n    }\n  },\n)"
                }
            ],
            "src/app/store/root/client/pizzas/pizzas.selectors.ts": [
                {
                    "name": "getLoadingState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/pizzas/pizzas.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getPizzasState,\n  (state: State) => state.loading,\n)"
                },
                {
                    "name": "getPizzasResponseState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/pizzas/pizzas.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getPizzasState,\n  (state: State) => state.pizzasResponse,\n)"
                },
                {
                    "name": "getPizzasState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/pizzas/pizzas.selectors.ts",
                    "type": "",
                    "defaultValue": "(state: RootStoreState.State) => state.client.pizzas"
                }
            ],
            "src/app/store/root/client/restaurants/restaurants.selectors.ts": [
                {
                    "name": "getRestaurantsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/restaurants/restaurants.selectors.ts",
                    "type": "",
                    "defaultValue": "(state: RootStoreState.State) => state.client.restaurants"
                }
            ],
            "src/app/store/root/client/user/user.selectors.ts": [
                {
                    "name": "getUserResponseState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/user/user.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getUserState,\n  (state: State) => state.userResponse,\n)"
                },
                {
                    "name": "getUserState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/user/user.selectors.ts",
                    "type": "",
                    "defaultValue": "(state: RootStoreState.State) => state.client.user"
                },
                {
                    "name": "getUserTokenState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/user/user.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getUserState,\n  (state: State) => state.userTokenResponse.token,\n)"
                }
            ],
            "src/app/store/root/state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/state.ts",
                    "type": "State",
                    "defaultValue": "{\n  app: AppStoreState.initialState,\n  client: ClientStoreState.initialState,\n}"
                }
            ],
            "src/app/store/root/app/state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/app/state.ts",
                    "type": "State",
                    "defaultValue": "{\n  errorResponse: new ResponseError(),\n}"
                }
            ],
            "src/app/store/root/client/state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/state.ts",
                    "type": "State",
                    "defaultValue": "{\n  user: UserStoreState.initialState,\n  pizzas: PizzasStoreState.initialState,\n  basket: BasketStoreState.initialState,\n  restaurants: RestaurantsStoreState.initialState,\n}"
                }
            ],
            "src/app/store/root/client/basket/basket.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/basket/basket.state.ts",
                    "type": "State",
                    "defaultValue": "{\n  pizzasResponse: {\n    pizzas: mockGetPizzasResponse?.pizzas?.slice(0, 2),\n  },\n}"
                }
            ],
            "src/app/store/root/client/pizzas/pizzas.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/pizzas/pizzas.state.ts",
                    "type": "State",
                    "defaultValue": "{\n  pizzasResponse: {\n    pizzas: [],\n  },\n  toppingsResponse: [\n    'anchovy', 'bacon', 'basil', 'chili', 'mozzarella', 'mushroom',\n    'olive', 'onion', 'pepper', 'pepperoni', 'sweetcorn', 'tomato',\n  ],\n  loading: false,\n}"
                }
            ],
            "src/app/store/root/client/restaurants/restaurants.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/restaurants/restaurants.state.ts",
                    "type": "State",
                    "defaultValue": "{\n  restaurants: []\n}"
                }
            ],
            "src/app/store/root/client/user/user.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/user/user.state.ts",
                    "type": "State",
                    "defaultValue": "{\n  logined: false,\n  userTokenResponse: {\n    token: 'TOKEN',\n    expiresAt: 'DATE',\n  },\n  userResponse: {\n    name: 'Username',\n  },\n}"
                }
            ],
            "src/app/store/root/client/restaurants/restaurants.actions.ts": [
                {
                    "name": "loadRestaurants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(`${PREFIX} Load Restaurants`,\n  props<{ query?: string }>())"
                },
                {
                    "name": "loadRestaurantsError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(`${PREFIX} Load Restaurants Error`)"
                },
                {
                    "name": "loadRestaurantsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(`${PREFIX} Load Restaurants Success`,\n  props<{ response: Restaurant[] }>())"
                },
                {
                    "name": "PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Restaurants]'"
                }
            ],
            "src/app/mocks/error/error-response.mock.ts": [
                {
                    "name": "mockErrorResponse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mocks/error/error-response.mock.ts",
                    "type": "",
                    "defaultValue": "new ResponseError()"
                }
            ],
            "src/app/mocks/pizzas/get-pizzas-response.mock.ts": [
                {
                    "name": "mockGetPizzasResponse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mocks/pizzas/get-pizzas-response.mock.ts",
                    "type": "",
                    "defaultValue": "new GetPizzasResponse()"
                }
            ],
            "src/app/mocks/pizzas/pizza.mock.ts": [
                {
                    "name": "mockPizza",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mocks/pizzas/pizza.mock.ts",
                    "type": "object",
                    "defaultValue": "{\n  id: '0',\n  name: 'Margherita',\n  description: 'PIZZA_DESCRIPTION_0',\n  toppings: ['anchovy', 'basil', 'mozzarella', 'tomato'],\n  price: 100,\n}"
                }
            ],
            "src/app/mocks/restaurants/restaurants.mock.ts": [
                {
                    "name": "mockRestaurants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mocks/restaurants/restaurants.mock.ts",
                    "type": "Restaurant[]",
                    "defaultValue": "[]"
                }
            ],
            "src/app/mocks/user/user-login-request.mock.ts": [
                {
                    "name": "mockUserLoginRequest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mocks/user/user-login-request.mock.ts",
                    "type": "",
                    "defaultValue": "new UserLoginRequest()"
                }
            ],
            "src/app/mocks/user/user-login-response.mock.ts": [
                {
                    "name": "mockUserLoginResponse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mocks/user/user-login-response.mock.ts",
                    "type": "",
                    "defaultValue": "new UserLoginResponse()"
                }
            ],
            "src/app/mocks/user/user-token.mock.ts": [
                {
                    "name": "mockUserToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mocks/user/user-token.mock.ts",
                    "type": "string",
                    "defaultValue": "'USER_TOKEN'"
                }
            ],
            "src/app/modules/shared/pizza-toppings/pizza-toppings.component.ts": [
                {
                    "name": "PIZZA_TOPPINGS_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/shared/pizza-toppings/pizza-toppings.component.ts",
                    "type": "object",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => PizzaToppingsComponent),\n  multi: true\n}"
                }
            ],
            "src/app/store/root/client/restaurants/restaurants.reducer.ts": [
                {
                    "name": "scoreboardReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/client/restaurants/restaurants.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(loadRestaurants, state => ({ ...state })),\n  on(loadRestaurantsSuccess, (state, { response }) => ({ ...state, restaurants: response })),\n  on(loadRestaurantsError, state => ({ ...state })),\n)"
                }
            ],
            "src/app/store/root/router/index.ts": [
                {
                    "name": "selectRouter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/router/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<RouterReducerState<RouterStateUrl>>('router')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/root/router/index.ts",
                    "type": "",
                    "defaultValue": "getSelectors(selectRouter)"
                }
            ],
            "src/app/uikit/button/button.stories.ts": [
                {
                    "name": "type",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uikit/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "ButtonType.SUCCESS"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/root/client/client-store.module.ts": [
                {
                    "name": "getReducers",
                    "file": "src/app/store/root/client/client-store.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "ActionReducerMap<ClientStoreState.State>"
                }
            ],
            "src/app/store/root/app/reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/root/app/reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/root/client/basket/basket.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/root/client/basket/basket.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/root/client/pizzas/pizzas.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/root/client/pizzas/pizzas.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/root/client/restaurants/restaurants.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/root/client/restaurants/restaurants.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/root/client/user/user.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/root/client/user/user.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/root/app/actions.ts": [
                {
                    "name": "ActionTypes",
                    "childs": [
                        {
                            "name": "AddErrorResponse",
                            "value": "[Errors] Add Error Response"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/root/app/actions.ts"
                }
            ],
            "src/app/store/root/client/basket/basket.actions.ts": [
                {
                    "name": "ActionTypes",
                    "childs": [
                        {
                            "name": "AddPizza",
                            "value": "[Basket] Add Pizza"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/root/client/basket/basket.actions.ts"
                }
            ],
            "src/app/store/root/client/pizzas/pizzas.actions.ts": [
                {
                    "name": "ActionTypes",
                    "childs": [
                        {
                            "name": "GetPizzas",
                            "value": "[Pizzas] Get Pizzas"
                        },
                        {
                            "name": "GetPizzasSuccess",
                            "value": "[Pizzas] Get Pizzas Success"
                        },
                        {
                            "name": "GetPizzasFailure",
                            "value": "[Pizzas] Get Pizzas Failure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/root/client/pizzas/pizzas.actions.ts"
                }
            ],
            "src/app/store/root/client/user/user.actions.ts": [
                {
                    "name": "ActionTypes",
                    "childs": [
                        {
                            "name": "Login",
                            "value": "[User] Login"
                        },
                        {
                            "name": "LoginSuccess",
                            "value": "[User] Login Success"
                        },
                        {
                            "name": "LoginFailure",
                            "value": "[User] Login Failure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/root/client/user/user.actions.ts"
                }
            ],
            "src/app/uikit/button/button.component.ts": [
                {
                    "name": "ButtonType",
                    "childs": [
                        {
                            "name": "DEFAULT",
                            "value": "default"
                        },
                        {
                            "name": "SUCCESS",
                            "value": "success"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/uikit/button/button.component.ts"
                }
            ],
            "src/app/modules/shared/restaurant-card/restaurant-card.component.ts": [
                {
                    "name": "CursorType",
                    "childs": [
                        {
                            "name": "Default"
                        },
                        {
                            "name": "Pointer"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/modules/shared/restaurant-card/restaurant-card.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/root/app/actions.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AddErrorResponse",
                    "file": "src/app/store/root/app/actions.ts",
                    "description": "",
                    "kind": 161
                }
            ],
            "src/app/store/root/client/basket/basket.actions.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AddPizza",
                    "file": "src/app/store/root/client/basket/basket.actions.ts",
                    "description": "",
                    "kind": 161
                }
            ],
            "src/app/store/root/client/pizzas/pizzas.actions.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "GetPizzas | GetPizzasSuccess | GetPizzasFailure",
                    "file": "src/app/store/root/client/pizzas/pizzas.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/root/client/user/user.actions.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Login | LoginSuccess | LoginFailure",
                    "file": "src/app/store/root/client/user/user.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "./modules/client/client.module#ClientModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/client/client-routing.module.ts",
                                        "module": "ClientRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ClientComponent",
                                                "children": [
                                                    {
                                                        "path": "restaurants",
                                                        "loadChildren": "./restaurants/restaurants.module#RestaurantsModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/modules/client/restaurants/restaurants-routing.module.ts",
                                                                        "module": "RestaurantsRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "RestaurantsComponent"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "RestaurantsModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "restaurants/:id",
                                                        "loadChildren": "./restaurant/restaurant.module#RestaurantModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/modules/client/restaurant/restaurant-routing.module.ts",
                                                                        "module": "RestaurantRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "RestaurantComponent"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "RestaurantModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "basket",
                                                        "loadChildren": "./basket/basket.module#BasketModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/modules/client/basket/basket-routing.module.ts",
                                                                        "module": "BasketRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "BasketComponent"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "BasketModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "",
                                                        "redirectTo": "restaurants",
                                                        "pathMatch": "full"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ClientModule"
                            }
                        ]
                    },
                    {
                        "path": "dashboard",
                        "loadChildren": "./modules/dashboard/dashboard.module#DashboardModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/dashboard/dashboard-routing.module.ts",
                                        "module": "DashboardRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DashboardComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DashboardModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/unsubscribe.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Unsubscribe",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/mocks/error/error-response.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockErrorResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mocks/pizzas/get-pizzas-response.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockGetPizzasResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mocks/pizzas/pizza.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockPizza",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mocks/restaurants/restaurants.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockRestaurants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mocks/user/user-login-request.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockUserLoginRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mocks/user/user-login-response.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockUserLoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mocks/user/user-token.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockUserToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/pizzas/get-pizzas-response.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetPizzasResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/pizzas/pizza.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Pizza",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/response/response-error.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResponseError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/response/response-success.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResponseSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/restaurants/restaurant.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RestaurantModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/restaurants/restaurant.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Restaurant",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user/user-login-request.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserLoginRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user/user-login-response.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserLoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user/user-response.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/client/basket/basket.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasketComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/client/client.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClientComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/client/restaurant/restaurant.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RestaurantComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/client/restaurants/restaurants.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RestaurantsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/client/shared/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dashboard/shared/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/breadcrumbs/breadcrumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/pizza-card/pizza-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/pizza-preview/pizza-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaPreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/pizza-preview/pizza-preview.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DROP_ANIMATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/pizza-preview/pizza-preview.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SLIDE_ANIMATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/pizza-small-preview/pizza-small-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaSmallPreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/pizza-toppings/pizza-toppings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaToppingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/pizza-toppings/pizza-toppings.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PIZZA_TOPPINGS_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/restaurant-card/restaurant-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RestaurantCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/restaurant-card/restaurant-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/restaurant-card/restaurant-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api-service.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "APIService",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/app/services/pizzas/pizzas.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PizzasService",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/restaurants/restaurants-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RestaurantsAPI",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/services/restaurants/restaurants-mock.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RestaurantsMockService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/restaurants/restaurants.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RestaurantsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/root/app/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddErrorResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/app/reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/app/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/app/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getErrorsResponseState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/app/state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/app/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/basket/basket.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddPizza",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/basket/basket.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/basket/basket.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBasketState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/basket/basket.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPizzasCountState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/basket/basket.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPizzasResponseState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/basket/basket.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTotalState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/basket/basket.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/basket/basket.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/client-store.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/client-store.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FEATURE_REDUCER_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/pizzas/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetPizzas",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/pizzas/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetPizzasFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/pizzas/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetPizzasSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/pizzas/pizzas.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PizzasEffects",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/root/client/pizzas/pizzas.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/pizzas/pizzas.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLoadingState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/pizzas/pizzas.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPizzasResponseState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/pizzas/pizzas.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPizzasState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/pizzas/pizzas.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/pizzas/pizzas.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRestaurants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRestaurantsError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRestaurantsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/restaurants/restaurants.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/restaurants/restaurants.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RestaurantsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/restaurants/restaurants.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/restaurants/restaurants.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "scoreboardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/restaurants/restaurants.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRestaurantsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/restaurants/restaurants.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/restaurants/restaurants.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/user/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/user/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/user/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/user/user.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserEffects",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/root/client/user/user.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/user/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUserResponseState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/user/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUserState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/user/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUserTokenState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/user/user.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/client/user/user.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/router/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterStateUrl",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/router/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/router/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRouter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/router/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/root/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uikit/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uikit/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "type",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uikit/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/uikit/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}